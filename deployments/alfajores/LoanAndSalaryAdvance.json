{
  "address": "0xf8B72Ede08230D8e233da24cA90faa7f4C437b97",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cUSD",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "TransferFromFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACCEPTED_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADVANCE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOAN_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REJECTED_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "acceptOrRejectStr",
          "type": "string"
        }
      ],
      "name": "acceptOrRejectLoanApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "saveForMeRate",
          "type": "uint8"
        }
      ],
      "name": "addEmployee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "interestRate",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "amortizationRate",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "loanOrAdvanceStr",
          "type": "string"
        }
      ],
      "name": "approveLoanOrAdvanceRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cUSD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "disableOrEnableEmployee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmployees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "identifier",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "employer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "workId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "saveForMe",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "pay",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "saveForMeRate",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "amortizationRate",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amortizationAmt",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ILoanAndSalaryAdvance.AdvanceRequestStatus",
                  "name": "status",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ILoanAndSalaryAdvance.AdvanceRequest",
              "name": "advanceReq",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "interest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amortizationAmt",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ILoanAndSalaryAdvance.LoanRequestStatus",
                  "name": "status",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ILoanAndSalaryAdvance.LoanRequest",
              "name": "loanReq",
              "type": "tuple"
            }
          ],
          "internalType": "struct ILoanAndSalaryAdvance.EmployeePayload[]",
          "name": "_returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        }
      ],
      "name": "preparePayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "amount",
          "type": "uint24"
        },
        {
          "internalType": "string",
          "name": "loanOrAdvanceStr",
          "type": "string"
        }
      ],
      "name": "requestAdvanceOrLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "save4Me",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "acceptSaveForMe",
          "type": "bool"
        }
      ],
      "name": "sendPayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3cfa2fa6c0f36f9dffb0c8e60a3e0efdcac21d13d72b7830c5e5e78d06c751de",
  "receipt": {
    "to": null,
    "from": "0x7624269a420c12395B743aCF327A61f91bd23b84",
    "contractAddress": "0xf8B72Ede08230D8e233da24cA90faa7f4C437b97",
    "transactionIndex": 0,
    "gasUsed": "2681545",
    "logsBloom": "0x
    "blockHash": "0xb6e95404f17d07514048cbeea30d312f0afd5e1c286d57b70a87af5781cd928a",
    "transactionHash": "0x3cfa2fa6c0f36f9dffb0c8e60a3e0efdcac21d13d72b7830c5e5e78d06c751de",
    "logs": [],
    "blockNumber": 23673816,
    "cumulativeGasUsed": "2681545",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1"
  ],
  "numDeployments": 9,
  "solcInputHash": "8ff5122c76268d9a6c021c754f8fcb0b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cUSD\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TransferFromFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACCEPTED_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADVANCE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REJECTED_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"acceptOrRejectStr\",\"type\":\"string\"}],\"name\":\"acceptOrRejectLoanApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"saveForMeRate\",\"type\":\"uint8\"}],\"name\":\"addEmployee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"interestRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amortizationRate\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"loanOrAdvanceStr\",\"type\":\"string\"}],\"name\":\"approveLoanOrAdvanceRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"disableOrEnableEmployee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmployees\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"employer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"workId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"saveForMe\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pay\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"saveForMeRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amortizationRate\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amortizationAmt\",\"type\":\"uint256\"},{\"internalType\":\"enum ILoanAndSalaryAdvance.AdvanceRequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.AdvanceRequest\",\"name\":\"advanceReq\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amortizationAmt\",\"type\":\"uint256\"},{\"internalType\":\"enum ILoanAndSalaryAdvance.LoanRequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.LoanRequest\",\"name\":\"loanReq\",\"type\":\"tuple\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.EmployeePayload[]\",\"name\":\"_returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"}],\"name\":\"preparePayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"amount\",\"type\":\"uint24\"},{\"internalType\":\"string\",\"name\":\"loanOrAdvanceStr\",\"type\":\"string\"}],\"name\":\"requestAdvanceOrLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"save4Me\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"acceptSaveForMe\",\"type\":\"bool\"}],\"name\":\"sendPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"sendPayment(uint256,bool)\":{\"details\":\"Employers pay employees Employees addition are not accepted at this point.  Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid Note: pay() is atomic by context i.e transfer to all employees must pass simultaneously.      Employers should ensure enough allowance is given to cover the pays.  Note: Employers can select the range of empployees to pay. This is done using the { start } and { stop } flags.       These flags neither can exceed the number of employees in storage nor can start eceeds stop.\",\"params\":{\"acceptSaveForMe\":\": Employer should specify if they're willing to save for employees by holding their pay in custody until otherwise canceled by the employee.                           This attracts interests compounded on the principal pay.  Note: Employer should give enough allowance correspond to cUSD balance to cover the expected payment range.\",\"employeeId\":\": Id assigned to employee at registration point. It corresponds to their position in the EmployeePayload array.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol\":\"LoanAndSalaryAdvance\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/loanAndSalaryAdvance/ILoanAndSalaryAdvance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface ILoanAndSalaryAdvance {\\r\\n    error TransferFromFailed();\\r\\n\\r\\n    enum AdvanceRequestStatus {NONE, PENDING, DISBURSED, SERVICED}\\r\\n    enum LoanRequestStatus {NONE, REQUESTED, RESPONDED, ACCEPTED, SERVICED}\\r\\n    struct EmployeePayload {\\r\\n        address identifier;\\r\\n        address employer;\\r\\n        uint workId;\\r\\n        bool active;\\r\\n        bool saveForMe;\\r\\n        uint pay;\\r\\n        uint8 saveForMeRate;\\r\\n        uint8 amortizationRate;\\r\\n        AdvanceRequest advanceReq;\\r\\n        LoanRequest loanReq;\\r\\n    }\\r\\n\\r\\n    struct AdvanceRequest {\\r\\n        uint amount;\\r\\n        uint amortizationAmt;\\r\\n        AdvanceRequestStatus status;\\r\\n    }\\r\\n\\r\\n    struct LoanRequest {\\r\\n        uint amount;\\r\\n        uint interest;\\r\\n        uint amortizationAmt;\\r\\n        LoanRequestStatus status;\\r\\n    }\\r\\n\\r\\n    struct PendingPayment {\\r\\n        EmployeePayload payload;\\r\\n        uint snapshotBal;\\r\\n        uint64 callTime;\\r\\n    }\\r\\n\\r\\n    // function preparePayment(uint employeeId) external returns(bool); \\r\\n    // function retrievEmployeePayment(uint employeeId) external returns(uint payBalance, uint loanBal, bool isLoan, bool isAdvance);\\r\\n    function sendPayment(uint employeeId, bool acceptSaveForMe) external returns(bool);\\r\\n    function save4Me(address employerAddr, uint employeeId, bool value) external returns(bool);\\r\\n    function acceptOrRejectLoanApproval(address employerAddr, uint employeeId, string memory acceptOrRejectStr) external returns(bool);\\r\\n    function approveLoanOrAdvanceRequest(uint employeeId, uint8 interestRate, uint8 amortizationRate, string memory loanOrAdvanceStr) external returns(bool);\\r\\n    function requestAdvanceOrLoan(address employerAddr, uint employeeId, uint24 amount, string memory loanOrAdvanceStr) external returns(bool);\\r\\n    function disableOrEnableEmployee(uint employeeId, bool value) external returns(bool);\\r\\n    function addEmployee(address addresses, uint256 payments, uint8 saveForMeRate) external returns(bool done);\\r\\n    \\r\\n}\",\"keccak256\":\"0xdf10662747a10cdf11c400e62b87c203a6b18c6f7ed27019a26eed68975a634f\",\"license\":\"MIT\"},\"contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\n\\r\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport { ILoanAndSalaryAdvance } from \\\"./ILoanAndSalaryAdvance.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns(uint8);\\r\\n    function balanceOf(address _of) external view returns(uint256);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ncontract LoanAndSalaryAdvance is Context, ILoanAndSalaryAdvance {\\r\\n    address public immutable cUSD;\\r\\n    bytes32 public immutable LOAN_HASH;\\r\\n    bytes32 public immutable ADVANCE_HASH;\\r\\n    bytes32 public immutable ACCEPTED_HASH;\\r\\n    bytes32 public immutable REJECTED_HASH;\\r\\n\\r\\n    // mapping (address => EmployeePayload[]) public employees;\\r\\n    mapping (address => mapping (address => bool)) private isAdded;\\r\\n\\r\\n    mapping (address => PendingPayment) private pendingPayment;\\r\\n\\r\\n    EmployeePayload[] private employees;\\r\\n\\r\\n    modifier validateEmployeeId(uint employeeId, address employer) {\\r\\n        require(employeeId < employees.length, \\\"Invalid employeeId\\\");\\r\\n        require(employees[employeeId].employer == employer, \\\"Not an employer of employeeId\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (address _cUSD) {\\r\\n        if(_cUSD == address(0)) revert();\\r\\n        cUSD = _cUSD;\\r\\n        LOAN_HASH = _toHash(\\\"LOAN\\\");\\r\\n        ADVANCE_HASH = _toHash(\\\"ADVANCE\\\");\\r\\n        ACCEPTED_HASH = _toHash(\\\"ACCEPTED\\\");\\r\\n        REJECTED_HASH = _toHash(\\\"REJECTED\\\");\\r\\n    }\\r\\n\\r\\n    receive() external payable { revert(); }\\r\\n\\r\\n    function _toHash(string memory loanOrHashStr) internal pure returns(bytes32 _hash) {\\r\\n        return keccak256(abi.encode(loanOrHashStr));\\r\\n    }\\r\\n\\r\\n    function _sendPayment(address from, address to, uint amount) private {\\r\\n        if(!IERC20(cUSD).transferFrom(from, to, amount)) revert TransferFromFailed();\\r\\n    }\\r\\n\\r\\n    function _amortize(uint employeeId, EmployeePayload memory pld) internal returns(uint payBalance) {\\r\\n        uint loanBal = pld.loanReq.amount;\\r\\n        if(loanBal > 0) {\\r\\n            pld.loanReq.amortizationAmt <= loanBal? \\r\\n                (loanBal -= pld.loanReq.amortizationAmt, payBalance = pld.pay - pld.loanReq.amortizationAmt) : \\r\\n                    (loanBal -= loanBal, payBalance = pld.pay - loanBal);\\r\\n            employees[employeeId].loanReq.amount = loanBal;\\r\\n            if(loanBal == 0) {\\r\\n                employees[employeeId].loanReq.status = LoanRequestStatus.SERVICED;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        loanBal = pld.advanceReq.amount;\\r\\n        if(loanBal > 0) {\\r\\n            pld.advanceReq.amortizationAmt <= loanBal? \\r\\n                (loanBal -= pld.advanceReq.amortizationAmt, payBalance = pld.pay - pld.advanceReq.amortizationAmt) : \\r\\n                    (loanBal -= loanBal, payBalance = pld.pay - loanBal);\\r\\n            employees[employeeId].advanceReq.amount = loanBal;\\r\\n            if(loanBal == 0) {\\r\\n                employees[employeeId].advanceReq.status = AdvanceRequestStatus.SERVICED;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function addEmployee(address employee, uint256 payment, uint8 saveForMeRate) public returns(bool done) {\\r\\n        address sender = _msgSender();\\r\\n        require(employee != address(0), \\\"Addresses is empty\\\");\\r\\n        // require(employee != sender, \\\"Employer is the employer\\\");\\r\\n        if(!isAdded[sender][employee]) {\\r\\n            isAdded[sender][employee] = true;\\r\\n            employees.push(EmployeePayload( employee, sender, employees.length, true, false, payment, saveForMeRate, 0, AdvanceRequest(0, 0, AdvanceRequestStatus(0)), LoanRequest(0, 0, 0, LoanRequestStatus(0))));\\r\\n        } else {\\r\\n            revert(\\\"Employee exist\\\");\\r\\n        }\\r\\n        return done;\\r\\n    }\\r\\n\\r\\n    function disableOrEnableEmployee(uint employeeId, bool value) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, _msgSender()) \\r\\n        returns(bool) \\r\\n    {\\r\\n        EmployeePayload memory pld = employees[employeeId];\\r\\n        if(value) {\\r\\n            require(!pld.active, \\\"Enabled\\\");\\r\\n        } else {\\r\\n            require(pld.active, \\\"Disabled\\\");\\r\\n        }\\r\\n\\r\\n        employees[employeeId].active = value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function requestAdvanceOrLoan(address employerAddr, uint employeeId, uint24 amount, string memory loanOrAdvanceStr) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, employerAddr) \\r\\n        returns(bool) \\r\\n    {\\r\\n        EmployeePayload memory pld = employees[employeeId];\\r\\n        string memory errorMessage = \\\"You have pending request\\\";\\r\\n        bool condition;\\r\\n        uint amount_ = amount * (10 ** IERC20(cUSD).decimals());\\r\\n        if(_toHash(loanOrAdvanceStr) == ADVANCE_HASH) {\\r\\n            condition = pld.advanceReq.status == AdvanceRequestStatus.NONE || pld.advanceReq.status == AdvanceRequestStatus.SERVICED;\\r\\n            require(amount_ <= pld.pay, \\\"Advance cannot exceed Salary\\\");\\r\\n            employees[employeeId].advanceReq = AdvanceRequest(amount_, 0, AdvanceRequestStatus.PENDING);\\r\\n        } else if(_toHash(loanOrAdvanceStr) == LOAN_HASH) {\\r\\n            condition = pld.loanReq.status == LoanRequestStatus.NONE || pld.loanReq.status == LoanRequestStatus.SERVICED;\\r\\n            errorMessage = \\\"You have pending loan request\\\";\\r\\n            employees[employeeId].loanReq = LoanRequest(amount_, 0, 0, LoanRequestStatus.REQUESTED);\\r\\n        } else {\\r\\n            revert(loanOrAdvanceStr);\\r\\n        }\\r\\n        require(condition, errorMessage);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approveLoanOrAdvanceRequest(uint employeeId, uint8 interestRate, uint8 amortizationRate, string memory loanOrAdvanceStr) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, _msgSender()) \\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory pld = employees[employeeId];\\r\\n        require(pld.active, \\\"Disabled\\\");\\r\\n        uint allowance = IERC20(cUSD).allowance(sender, address(this));\\r\\n        uint interest = (allowance * interestRate) / 100;\\r\\n        uint amortizationAmt = ((allowance + interest) * amortizationRate) / 100;\\r\\n        require(amortizationAmt <= pld.pay, \\\"Amortization exceeds pay\\\");\\r\\n        if(_toHash(loanOrAdvanceStr) == ADVANCE_HASH) {\\r\\n            require(pld.advanceReq.status == AdvanceRequestStatus.PENDING, \\\"Invalid request\\\");\\r\\n            employees[employeeId].advanceReq = AdvanceRequest(allowance, amortizationAmt, AdvanceRequestStatus.DISBURSED);\\r\\n            _sendPayment(sender, pld.identifier, allowance);\\r\\n        } else if(_toHash(loanOrAdvanceStr) == LOAN_HASH) {\\r\\n            require(pld.loanReq.status == LoanRequestStatus.REQUESTED, \\\"Invalid request\\\");\\r\\n            employees[employeeId].loanReq = LoanRequest(\\r\\n                allowance + interest,\\r\\n                interest,\\r\\n                amortizationAmt,\\r\\n                LoanRequestStatus.RESPONDED\\r\\n            );\\r\\n        } else {\\r\\n            revert (loanOrAdvanceStr);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function acceptOrRejectLoanApproval(address employerAddr, uint employeeId, string memory acceptOrRejectStr) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, employerAddr)\\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory emp = employees[employeeId];\\r\\n        uint allowance = IERC20(cUSD).allowance(employerAddr, address(this));\\r\\n        require(sender == emp.identifier, \\\"UnAuthorized call\\\");\\r\\n        if(allowance > 0) {\\r\\n            if(_toHash(acceptOrRejectStr) == ACCEPTED_HASH) {\\r\\n                employees[employeeId].loanReq.status = LoanRequestStatus.ACCEPTED;\\r\\n                _sendPayment(employerAddr, emp.identifier, allowance);\\r\\n            } else if(_toHash(acceptOrRejectStr) == REJECTED_HASH) {\\r\\n                delete employees[employeeId].loanReq;\\r\\n            } else {\\r\\n                revert (acceptOrRejectStr);\\r\\n            }\\r\\n        } else {\\r\\n            delete employees[employeeId].loanReq;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function save4Me(address employerAddr, uint employeeId, bool value)\\r\\n        public\\r\\n        validateEmployeeId(employeeId, employerAddr) \\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory emp = employees[employeeId];\\r\\n        require(sender == emp.identifier, \\\"UnAuthorized call\\\");\\r\\n        employees[employeeId].saveForMe = value;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**@dev Employers pay employees\\r\\n     * Employees addition are not accepted at this point. \\r\\n     * Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid\\r\\n     * Note: pay() is atomic by context i.e transfer to all employees must pass simultaneously.\\r\\n     *      Employers should ensure enough allowance is given to cover the pays.\\r\\n     * \\r\\n     * Note: Employers can select the range of empployees to pay. This is done using the { start } and { stop } flags.\\r\\n     *       These flags neither can exceed the number of employees in storage nor can start eceeds stop.\\r\\n     * @param employeeId : Id assigned to employee at registration point. It corresponds to their position in the EmployeePayload array.\\r\\n     * @param acceptSaveForMe : Employer should specify if they're willing to save for employees by holding their pay in custody until otherwise canceled by the employee. \\r\\n     *                          This attracts interests compounded on the principal pay. \\r\\n     * Note: Employer should give enough allowance correspond to cUSD balance to cover the expected payment range.\\r\\n     */\\r\\n       function sendPayment(uint employeeId, bool acceptSaveForMe) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, _msgSender())\\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory pld = employees[employeeId]; \\r\\n        uint allowance = IERC20(cUSD).allowance(sender, address(this));\\r\\n        uint pay = _amortize(employeeId, pld);\\r\\n        require(allowance >= pay, \\\"Not enough balance\\\");\\r\\n        if(!pld.saveForMe) {\\r\\n            _sendPayment(sender, pld.identifier, pay);\\r\\n        }\\r\\n        if(pld.saveForMe && acceptSaveForMe) {\\r\\n            employees[employeeId].pay = (pay + ((pay * pld.saveForMeRate) / 100));\\r\\n        }\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function preparePayment(uint employeeId) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, _msgSender())\\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory pld = employees[employeeId];\\r\\n        pendingPayment[sender] = PendingPayment(pld, IERC20(cUSD).balanceOf(pld.identifier), uint64(block.timestamp));\\r\\n        // uint allowance = msg.value;\\r\\n        // require(allowance >= pay, \\\"Not enough balance\\\");\\r\\n        // uint pay = _amortize(employeeId, pld);\\r\\n        // if(!pld.saveForMe) {\\r\\n        //     _sendPayment(sender, pld.identifier, pay);\\r\\n        // }\\r\\n        // if(pld.saveForMe && acceptSaveForMe) {\\r\\n        //     employees[employeeId].pay = (pay + ((pay * pld.saveForMeRate) / 100));\\r\\n        // }\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getEmployees() public view returns(EmployeePayload[] memory _returnData) {\\r\\n        _returnData = employees;\\r\\n        return _returnData;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8815e8522ce3e0ac01f1c56443de81393cdc7510a5940879ece5b61c831f1c18\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b506040516200325e3803806200325e8339810160408190526200003591620001bc565b600160a060020a0381166200004957600080fd5b600160a060020a03811660805260408051808201909152600481527f4c4f414e0000000000000000000000000000000000000000000000000000000060208201526200009e906401000000006200018a810204565b60a05260408051808201909152600781527f414456414e4345000000000000000000000000000000000000000000000000006020820152620000e9906401000000006200018a810204565b60c05260408051808201909152600881527f4143434550544544000000000000000000000000000000000000000000000000602082015262000134906401000000006200018a810204565b60e05260408051808201909152600881527f52454a454354454400000000000000000000000000000000000000000000000060208201526200017f906401000000006200018a810204565b61010052506200023e565b6000816040516020016200019f9190620001ee565b604051602081830303815290604052805190602001209050919050565b600060208284031215620001cf57600080fd5b8151600160a060020a0381168114620001e757600080fd5b9392505050565b600060208083528351808285015260005b818110156200021d57858101830151858201604001528201620001ff565b506000604082860101526040601f19601f8301168501019250505092915050565b60805160a05160c05160e05161010051612f87620002d7600039600081816102a40152611bc601526000818161034c0152611b3c0152600081816101e20152818161153f015261203801526000818161031801528181611695015261216c01526000818161011f015281816105a2015281816109320152818161148501528181611a5f01528181611f2b01526127e10152612f876000f3fe6080604052600436106100fe576000357c01000000000000000000000000000000000000000000000000000000009004806380c231eb1161009c57806393e5cb4e1161007657806393e5cb4e146102c6578063b2bf0bab146102e6578063c5a5955e14610306578063ddfa43241461033a57600080fd5b806380c231eb1461025257806381a0941614610272578063883281c41461029257600080fd5b80634abefa36116100d85780634abefa36146101ae5780635fdc32d1146101d057806371a0a6fb14610212578063759fe1691461023257600080fd5b80631fccf6721461010d578063423a22191461015e57806348cacdbc1461018e57600080fd5b3661010857600080fd5b600080fd5b34801561011957600080fd5b506101417f000000000000000000000000000000000000000000000000000000000000000081565b604051600160a060020a0390911681526020015b60405180910390f35b34801561016a57600080fd5b5061017e6101793660046128ca565b61036e565b6040519015158152602001610155565b34801561019a57600080fd5b5061017e6101a93660046128fa565b6106fc565b3480156101ba57600080fd5b506101c3610b45565b6040516101559190612992565b3480156101dc57600080fd5b506102047f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610155565b34801561021e57600080fd5b5061017e61022d366004612a80565b610cd4565b34801561023e57600080fd5b5061017e61024d366004612acf565b610f6b565b34801561025e57600080fd5b5061017e61026d366004612baa565b61125d565b34801561027e57600080fd5b5061017e61028d366004612c1c565b611831565b34801561029e57600080fd5b506102047f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d257600080fd5b5061017e6102e1366004612c73565b611cac565b3480156102f257600080fd5b5061017e6103013660046128ca565b6122cb565b34801561031257600080fd5b506102047f000000000000000000000000000000000000000000000000000000000000000081565b34801561034657600080fd5b506102047f000000000000000000000000000000000000000000000000000000000000000081565b60008233600254821061039f5760405160e560020a62461bcd02815260040161039690612cab565b60405180910390fd5b80600160a060020a0316600283815481106103bc576103bc612ce2565b600091825260209091206001600d909202010154600160a060020a0316146103f95760405160e560020a62461bcd02815260040161039690612cfb565b600033905060006002878154811061041357610413612ce2565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e08801528551908101865260068501805482526007860154988201989098526008850154969794969288019590949390850192909116908111156104dc576104dc612913565b60038111156104ed576104ed612913565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600481111561054757610547612913565b600481111561055857610558612913565b9052509052506040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301523060248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e90604401602060405180830381865afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190612d32565b9050600061061b89846125a5565b9050808210156106705760405160e560020a62461bcd02815260206004820152601260248201527f4e6f7420656e6f7567682062616c616e636500000000000000000000000000006044820152606401610396565b8260800151610688576106888484600001518361279a565b826080015180156106965750875b156106ed5760648360c0015160ff16826106b09190612d64565b6106ba9190612d81565b6106c49082612da6565b60028a815481106106d7576106d7612ce2565b90600052602060002090600d0201600401819055505b50600198975050505050505050565b6000813360025482106107245760405160e560020a62461bcd02815260040161039690612cab565b80600160a060020a03166002838154811061074157610741612ce2565b600091825260209091206001600d909202010154600160a060020a03161461077e5760405160e560020a62461bcd02815260040161039690612cfb565b600033905060006002868154811061079857610798612ce2565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e088015285519081018652600685018054825260078601549882019890985260088501549697949692880195909493908501929091169081111561086157610861612913565b600381111561087257610872612913565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660048111156108cc576108cc612913565b60048111156108dd576108dd612913565b90525090525060408051606081018252828152825191517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201529293509160208301917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099d9190612d32565b81524267ffffffffffffffff16602091820152600160a060020a038481166000908152600180845260409182902085518051825473ffffffffffffffffffffffffffffffffffffffff19908116918716919091178355818701518385018054909216961695909517909455838301516002820155606084015160038083018054608088015161ffff1991821694151561ff0019169490941761010094151585021790915560a0870151600485015560c087015160058501805460e08a015160ff93841691909416179190921684021790559085015180516006840190815596810151600784015593840151600883018054939788969590949293919260ff1916918490811115610aaf57610aaf612913565b021790555050506101208201518051600983019081556020820151600a8401556040820151600b8401556060820151600c8401805460ff19166001836004811115610afc57610afc612913565b02179055505050506020830151600d83015550604090910151600e909101805467ffffffffffffffff191667ffffffffffffffff90921691909117905550600195945050505050565b60606002805480602002602001604051908101604052809291908181526020016000905b82821015610ccb5760008481526020908190206040805161014081018252600d86029092018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e0880152855190810186526006850180548252600786015498820198909852600885015496979496928801959094939085019290911690811115610c3957610c39612913565b6003811115610c4a57610c4a612913565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115610ca457610ca4612913565b6004811115610cb557610cb5612913565b9052509052508152600190910190602001610b69565b50505050905090565b600082846002805490508210610cff5760405160e560020a62461bcd02815260040161039690612cab565b80600160a060020a031660028381548110610d1c57610d1c612ce2565b600091825260209091206001600d909202010154600160a060020a031614610d595760405160e560020a62461bcd02815260040161039690612cfb565b6000339050600060028781548110610d7357610d73612ce2565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e0880152855190810186526006850180548252600786015498820198909852600885015496979496928801959094939085019290911690811115610e3c57610e3c612913565b6003811115610e4d57610e4d612913565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115610ea757610ea7612913565b6004811115610eb857610eb8612913565b9052509052508051909150600160a060020a03838116911614610f205760405160e560020a62461bcd02815260206004820152601160248201527f556e417574686f72697a65642063616c6c0000000000000000000000000000006044820152606401610396565b8560028881548110610f3457610f34612ce2565b90600052602060002090600d020160030160016101000a81548160ff02191690831515021790555060019450505050509392505050565b600033600160a060020a038516610fc75760405160e560020a62461bcd02815260206004820152601260248201527f41646472657373657320697320656d70747900000000000000000000000000006044820152606401610396565b600160a060020a038082166000908152602081815260408083209389168352929052205460ff1661120a57600160a060020a03818116600081815260208181526040808320948a16808452948252808320805460ff19166001908117909155815161014081018352958652858301949094526002805486830152606080870195909552608080870185905260a087018b905260ff8a1660c088015260e087018590528251808701845285815280850186905280840186905261010088015282519081018352848152928301849052908201839052939261012084019290820152905281546001808201845560009384526020938490208351600d90930201805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a039485161782558486015182840180549092169416939093179092556040808401516002840155606084015160038085018054608088015161ffff1991821694151561ff0019169490941761010094151585021790915560a0870151600487015560c087015160058701805460e08a015160ff93841691909416179190921684021790559085015180516006860190815596810151600786015591820151600885018054969795969395949193909260ff19909116919084908111156111af576111af612913565b021790555050506101208201518051600983019081556020820151600a8401556040820151600b8401556060820151600c8401805460ff191660018360048111156111fc576111fc612913565b021790555050505050611255565b60405160e560020a62461bcd02815260206004820152600e60248201527f456d706c6f7965652065786973740000000000000000000000000000000000006044820152606401610396565b509392505050565b6000838560028054905082106112885760405160e560020a62461bcd02815260040161039690612cab565b80600160a060020a0316600283815481106112a5576112a5612ce2565b600091825260209091206001600d909202010154600160a060020a0316146112e25760405160e560020a62461bcd02815260040161039690612cfb565b6000600287815481106112f7576112f7612ce2565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e08801528551908101865260068501805482526007860154988201989098526008850154969794969288019590949390850192909116908111156113c0576113c0612913565b60038111156113d1576113d1612913565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600481111561142b5761142b612913565b600481111561143c5761143c612913565b8152505081525050905060006040518060400160405280601881526020017f596f7520686176652070656e64696e672072657175657374000000000000000081525090506000807f0000000000000000000000000000000000000000000000000000000000000000600160a060020a031663313ce5676040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381865afa1580156114fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115219190612db9565b61152c90600a612ec4565b61153b9062ffffff8b16612d64565b90507f000000000000000000000000000000000000000000000000000000000000000061156789612889565b0361169357600084610100015160400151600381111561158957611589612913565b14806115af575060038461010001516040015160038111156115ad576115ad612913565b145b91508360a001518111156116085760405160e560020a62461bcd02815260206004820152601c60248201527f416476616e63652063616e6e6f74206578636565642053616c617279000000006044820152606401610396565b6040805160608101825282815260006020820152908101600181525060028b8154811061163757611637612ce2565b90600052602060002090600d0201600601600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083600381111561168657611686612913565b02179055509050506117fd565b7f00000000000000000000000000000000000000000000000000000000000000006116bd89612889565b036117e05760008461012001516060015160048111156116df576116df612913565b14806117055750600484610120015160600151600481111561170357611703612913565b145b91506040518060400160405280601d81526020017f596f7520686176652070656e64696e67206c6f616e20726571756573740000008152509250604051806080016040528082815260200160008152602001600081526020016001600481111561177157611771612913565b81525060028b8154811061178757611787612ce2565b90600052602060002090600d020160090160008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff0219169083600481111561168657611686612913565b8760405160e560020a62461bcd0281526004016103969190612ed3565b828261181f5760405160e560020a62461bcd0281526004016103969190612ed3565b5060019b9a5050505050505050505050565b60008284600280549050821061185c5760405160e560020a62461bcd02815260040161039690612cab565b80600160a060020a03166002838154811061187957611879612ce2565b600091825260209091206001600d909202010154600160a060020a0316146118b65760405160e560020a62461bcd02815260040161039690612cfb565b60003390506000600287815481106118d0576118d0612ce2565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e088015285519081018652600685018054825260078601549882019890985260088501549697949692880195909493908501929091169081111561199957611999612913565b60038111156119aa576119aa612913565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115611a0457611a04612913565b6004811115611a1557611a15612913565b9052509052506040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a038a811660048301523060248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e90604401602060405180830381865afa158015611aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aca9190612d32565b90508160000151600160a060020a031683600160a060020a031614611b345760405160e560020a62461bcd02815260206004820152601160248201527f556e417574686f72697a65642063616c6c0000000000000000000000000000006044820152606401610396565b8015611c59577f0000000000000000000000000000000000000000000000000000000000000000611b6488612889565b03611bc457600360028981548110611b7e57611b7e612ce2565b60009182526020909120600c600d9092020101805460ff19166001836004811115611bab57611bab612913565b0217905550611bbf8983600001518361279a565b6106ed565b7f0000000000000000000000000000000000000000000000000000000000000000611bee88612889565b03611c3c5760028881548110611c0657611c06612ce2565b6000918252602082206009600d90920201908101829055600a8101829055600b810191909155600c01805460ff191690556106ed565b8660405160e560020a62461bcd0281526004016103969190612ed3565b60028881548110611c6c57611c6c612ce2565b6000918252602082206009600d90920201908101829055600a8101829055600b810191909155600c01805460ff1916905550600198975050505050505050565b600084336002548210611cd45760405160e560020a62461bcd02815260040161039690612cab565b80600160a060020a031660028381548110611cf157611cf1612ce2565b600091825260209091206001600d909202010154600160a060020a031614611d2e5760405160e560020a62461bcd02815260040161039690612cfb565b6000339050600060028981548110611d4857611d48612ce2565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e0880152855190810186526006850180548252600786015498820198909852600885015496979496928801959094939085019290911690811115611e1157611e11612913565b6003811115611e2257611e22612913565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115611e7c57611e7c612913565b6004811115611e8d57611e8d612913565b9052509052506060810151909150611eea5760405160e560020a62461bcd02815260206004820152600860248201527f44697361626c65640000000000000000000000000000000000000000000000006044820152606401610396565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a0383811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e90604401602060405180830381865afa158015611f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f989190612d32565b905060006064611fab60ff8c1684612d64565b611fb59190612d81565b90506000606460ff8b16611fc98486612da6565b611fd39190612d64565b611fdd9190612d81565b90508360a001518111156120365760405160e560020a62461bcd02815260206004820152601860248201527f416d6f7274697a6174696f6e20657863656564732070617900000000000000006044820152606401610396565b7f00000000000000000000000000000000000000000000000000000000000000006120608a612889565b0361216a57600184610100015160400151600381111561208257612082612913565b146120d25760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c6964207265717565737400000000000000000000000000000000006044820152606401610396565b6040805160608101825284815260208101839052908101600281525060028d8154811061210157612101612ce2565b90600052602060002090600d0201600601600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083600381111561215057612150612913565b0217905550508451612165915086908561279a565b61181f565b7f00000000000000000000000000000000000000000000000000000000000000006121948a612889565b036122ae5760018461012001516060015160048111156121b6576121b6612913565b146122065760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c6964207265717565737400000000000000000000000000000000006044820152606401610396565b6040518060800160405280838561221d9190612da6565b81526020810184905260408101839052606001600281525060028d8154811061224857612248612ce2565b90600052602060002090600d020160090160008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908360048111156122a1576122a1612913565b021790555090505061181f565b8860405160e560020a62461bcd0281526004016103969190612ed3565b6000823360025482106122f35760405160e560020a62461bcd02815260040161039690612cab565b80600160a060020a03166002838154811061231057612310612ce2565b600091825260209091206001600d909202010154600160a060020a03161461234d5760405160e560020a62461bcd02815260040161039690612cfb565b60006002868154811061236257612362612ce2565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e088015285519081018652600685018054825260078601549882019890985260088501549697949692880195909493908501929091169081111561242b5761242b612913565b600381111561243c5761243c612913565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600481111561249657612496612913565b60048111156124a7576124a7612913565b9052509052509050841561250f5780606001511561250a5760405160e560020a62461bcd02815260206004820152600760248201527f456e61626c6564000000000000000000000000000000000000000000000000006044820152606401610396565b612563565b80606001516125635760405160e560020a62461bcd02815260206004820152600860248201527f44697361626c65640000000000000000000000000000000000000000000000006044820152606401610396565b846002878154811061257757612577612ce2565b60009182526020909120600d90910201600301805460ff191691151591909117905550600195945050505050565b61012081015151600090801561269d57808361012001516040015111156125eb576125d08180612f21565b905080818460a001516125e39190612f21565b92508261261f565b610120830151604001516125ff9082612f21565b905080836101200151604001518460a0015161261b9190612f21565b9250825b5050806002858154811061263557612635612ce2565b90600052602060002090600d0201600901600001819055508060000361269d5760046002858154811061266a5761266a612ce2565b60009182526020909120600c600d9092020101805460ff1916600183600481111561269757612697612913565b02179055505b5061010082015151801561279357808361010001516020015111156126e1576126c68180612f21565b905080818460a001516126d99190612f21565b925082612715565b610100830151602001516126f59082612f21565b905080836101000151602001518460a001516127119190612f21565b9250825b5050806002858154811061272b5761272b612ce2565b90600052602060002090600d020160060160000181905550806000036127935760036002858154811061276057612760612ce2565b600091825260209091206008600d9092020101805460ff1916600183600381111561278d5761278d612913565b02179055505b5092915050565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301528381166024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af115801561282a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284e9190612f34565b612884576040517f7939f42400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60008160405160200161289c9190612ed3565b604051602081830303815290604052805190602001209050919050565b80151581146128c757600080fd5b50565b600080604083850312156128dd57600080fd5b8235915060208301356128ef816128b9565b809150509250929050565b60006020828403121561290c57600080fd5b5035919050565b60e060020a634e487b7102600052602160045260246000fd5b805182526020810151602083015260408101516004811061294f5761294f612913565b806040840152505050565b80518252602081015160208301526040810151604083015260608101516005811061298757612987612913565b806060840152505050565b602080825282518282018190526000919060409081850190868401855b82811015612a575781518051600160a060020a039081168652878201511687860152858101518686015260608082015115159086015260808082015115159086015260a0808201519086015260c08082015160ff9081169187019190915260e0808301519091169086015261010080820151612a2d8288018261292c565b50506101200151612a4261016086018261295a565b506101e09390930192908501906001016129af565b5091979650505050505050565b8035600160a060020a0381168114612a7b57600080fd5b919050565b600080600060608486031215612a9557600080fd5b612a9e84612a64565b9250602084013591506040840135612ab5816128b9565b809150509250925092565b60ff811681146128c757600080fd5b600080600060608486031215612ae457600080fd5b612aed84612a64565b9250602084013591506040840135612ab581612ac0565b60e060020a634e487b7102600052604160045260246000fd5b600082601f830112612b2e57600080fd5b813567ffffffffffffffff80821115612b4957612b49612b04565b604051601f8301601f19908116603f01168101908282118183101715612b7157612b71612b04565b81604052838152866020858801011115612b8a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215612bc057600080fd5b612bc985612a64565b935060208501359250604085013562ffffff81168114612be857600080fd5b9150606085013567ffffffffffffffff811115612c0457600080fd5b612c1087828801612b1d565b91505092959194509250565b600080600060608486031215612c3157600080fd5b612c3a84612a64565b925060208401359150604084013567ffffffffffffffff811115612c5d57600080fd5b612c6986828701612b1d565b9150509250925092565b60008060008060808587031215612c8957600080fd5b843593506020850135612c9b81612ac0565b92506040850135612be881612ac0565b60208082526012908201527f496e76616c696420656d706c6f79656549640000000000000000000000000000604082015260600190565b60e060020a634e487b7102600052603260045260246000fd5b6020808252601d908201527f4e6f7420616e20656d706c6f796572206f6620656d706c6f7965654964000000604082015260600190565b600060208284031215612d4457600080fd5b5051919050565b60e060020a634e487b7102600052601160045260246000fd5b8082028115828204841417612d7b57612d7b612d4b565b92915050565b600082612da15760e060020a634e487b7102600052601260045260246000fd5b500490565b80820180821115612d7b57612d7b612d4b565b600060208284031215612dcb57600080fd5b8151612dd681612ac0565b9392505050565b600181815b80851115612e1a578160001904821115612dfe57612dfe612d4b565b80851615612e0b57918102915b60029094049390800290612de2565b509250929050565b600082612e3157506001612d7b565b81612e3e57506000612d7b565b8160018114612e545760028114612e5e57612e7b565b6001915050612d7b565b60ff841115612e6f57612e6f612d4b565b8360020a915050612d7b565b5060208310610133831016604e8410600b8410161715612e9e575081810a612d7b565b612ea88383612ddd565b8060001904821115612ebc57612ebc612d4b565b029392505050565b6000612dd660ff841683612e22565b600060208083528351808285015260005b81811015612f0057858101830151858201604001528201612ee4565b506000604082860101526040601f19601f8301168501019250505092915050565b81810381811115612d7b57612d7b612d4b565b600060208284031215612f4657600080fd5b8151612dd6816128b956fea26469706673582212200e98746cbd016e21bdec17a8202f738798f33453b9c8616dbd23a49702af39da64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "sendPayment(uint256,bool)": {
        "details": "Employers pay employees Employees addition are not accepted at this point.  Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid Note: pay() is atomic by context i.e transfer to all employees must pass simultaneously.      Employers should ensure enough allowance is given to cover the pays.  Note: Employers can select the range of empployees to pay. This is done using the { start } and { stop } flags.       These flags neither can exceed the number of employees in storage nor can start eceeds stop.",
        "params": {
          "acceptSaveForMe": ": Employer should specify if they're willing to save for employees by holding their pay in custody until otherwise canceled by the employee.                           This attracts interests compounded on the principal pay.  Note: Employer should give enough allowance correspond to cUSD balance to cover the expected payment range.",
          "employeeId": ": Id assigned to employee at registration point. It corresponds to their position in the EmployeePayload array."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 230,
        "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
        "label": "isAdded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 235,
        "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
        "label": "pendingPayment",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(PendingPayment)93_storage)"
      },
      {
        "astId": 239,
        "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
        "label": "employees",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(EmployeePayload)67_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(EmployeePayload)67_storage)dyn_storage": {
        "base": "t_struct(EmployeePayload)67_storage",
        "encoding": "dynamic_array",
        "label": "struct ILoanAndSalaryAdvance.EmployeePayload[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(AdvanceRequestStatus)38": {
        "encoding": "inplace",
        "label": "enum ILoanAndSalaryAdvance.AdvanceRequestStatus",
        "numberOfBytes": "1"
      },
      "t_enum(LoanRequestStatus)44": {
        "encoding": "inplace",
        "label": "enum ILoanAndSalaryAdvance.LoanRequestStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(PendingPayment)93_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ILoanAndSalaryAdvance.PendingPayment)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingPayment)93_storage"
      },
      "t_struct(AdvanceRequest)75_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.AdvanceRequest",
        "members": [
          {
            "astId": 69,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 71,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amortizationAmt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 74,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(AdvanceRequestStatus)38"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(EmployeePayload)67_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.EmployeePayload",
        "members": [
          {
            "astId": 46,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "identifier",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 48,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "employer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 50,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "workId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 52,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 54,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "saveForMe",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 56,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "pay",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 58,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "saveForMeRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 60,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amortizationRate",
            "offset": 1,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 63,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "advanceReq",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(AdvanceRequest)75_storage"
          },
          {
            "astId": 66,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "loanReq",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(LoanRequest)85_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(LoanRequest)85_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.LoanRequest",
        "members": [
          {
            "astId": 77,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 79,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "interest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 81,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amortizationAmt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 84,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(LoanRequestStatus)44"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PendingPayment)93_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.PendingPayment",
        "members": [
          {
            "astId": 88,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "payload",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(EmployeePayload)67_storage"
          },
          {
            "astId": 90,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "snapshotBal",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 92,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "callTime",
            "offset": 0,
            "slot": "14",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}