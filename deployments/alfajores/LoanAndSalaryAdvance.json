{
  "address": "0x8e2b02CCD43cE8a500C012fcd533FAB2C2228502",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cUSD",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "TransferFromFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACCEPTED_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADVANCE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOAN_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REJECTED_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "acceptOrRejectStr",
          "type": "string"
        }
      ],
      "name": "acceptOrRejectLoanApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "payments",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8",
          "name": "saveForMeRate",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "amortizationRate",
          "type": "uint8"
        }
      ],
      "name": "addEmployee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "interestRate",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "amortizationRate",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "loanOrAdvanceStr",
          "type": "string"
        }
      ],
      "name": "approveLoanOrAdvanceRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cUSD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "disableOrEnableEmployee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "employees",
      "outputs": [
        {
          "internalType": "address",
          "name": "identifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "workId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "saveForMe",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "pay",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "saveForMeRate",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "amortizationRate",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amortizationAmt",
              "type": "uint256"
            },
            {
              "internalType": "enum ILoanAndSalaryAdvance.AdvanceRequestStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct ILoanAndSalaryAdvance.AdvanceRequest",
          "name": "advanceReq",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amortizationAmt",
              "type": "uint256"
            },
            {
              "internalType": "enum ILoanAndSalaryAdvance.LoanRequestStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct ILoanAndSalaryAdvance.LoanRequest",
          "name": "loanReq",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employerAddr",
          "type": "address"
        }
      ],
      "name": "getEmployees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "identifier",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "workId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "saveForMe",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "pay",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "saveForMeRate",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "amortizationRate",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amortizationAmt",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ILoanAndSalaryAdvance.AdvanceRequestStatus",
                  "name": "status",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ILoanAndSalaryAdvance.AdvanceRequest",
              "name": "advanceReq",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "interest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amortizationAmt",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ILoanAndSalaryAdvance.LoanRequestStatus",
                  "name": "status",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ILoanAndSalaryAdvance.LoanRequest",
              "name": "loanReq",
              "type": "tuple"
            }
          ],
          "internalType": "struct ILoanAndSalaryAdvance.EmployeePayload[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "loanOrAdvanceStr",
          "type": "string"
        }
      ],
      "name": "requestAdvanceOrLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "save4Me",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "acceptSaveForMe",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stop",
          "type": "uint256"
        }
      ],
      "name": "sendPayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3a062b1e9cacf41f82f47979dec90c25c71e552072f69731f5e748b6d996cdae",
  "receipt": {
    "to": null,
    "from": "0x7624269a420c12395B743aCF327A61f91bd23b84",
    "contractAddress": "0x8e2b02CCD43cE8a500C012fcd533FAB2C2228502",
    "transactionIndex": 0,
    "gasUsed": "2576712",
    "logsBloom": "0x
    "blockHash": "0xcae0743ad369f8c276c12974dddf058fc331fc67df7a66988e9d40be56baffef",
    "transactionHash": "0x3a062b1e9cacf41f82f47979dec90c25c71e552072f69731f5e748b6d996cdae",
    "logs": [],
    "blockNumber": 23597322,
    "cumulativeGasUsed": "2576712",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1"
  ],
  "numDeployments": 2,
  "solcInputHash": "50ea7142da5f4ed879d67a7cecb62d00",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cUSD\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TransferFromFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACCEPTED_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADVANCE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REJECTED_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"acceptOrRejectStr\",\"type\":\"string\"}],\"name\":\"acceptOrRejectLoanApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payments\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"saveForMeRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amortizationRate\",\"type\":\"uint8\"}],\"name\":\"addEmployee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"interestRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amortizationRate\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"loanOrAdvanceStr\",\"type\":\"string\"}],\"name\":\"approveLoanOrAdvanceRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"disableOrEnableEmployee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"employees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"workId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"saveForMe\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pay\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"saveForMeRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amortizationRate\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amortizationAmt\",\"type\":\"uint256\"},{\"internalType\":\"enum ILoanAndSalaryAdvance.AdvanceRequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.AdvanceRequest\",\"name\":\"advanceReq\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amortizationAmt\",\"type\":\"uint256\"},{\"internalType\":\"enum ILoanAndSalaryAdvance.LoanRequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.LoanRequest\",\"name\":\"loanReq\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employerAddr\",\"type\":\"address\"}],\"name\":\"getEmployees\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"workId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"saveForMe\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pay\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"saveForMeRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amortizationRate\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amortizationAmt\",\"type\":\"uint256\"},{\"internalType\":\"enum ILoanAndSalaryAdvance.AdvanceRequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.AdvanceRequest\",\"name\":\"advanceReq\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amortizationAmt\",\"type\":\"uint256\"},{\"internalType\":\"enum ILoanAndSalaryAdvance.LoanRequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.LoanRequest\",\"name\":\"loanReq\",\"type\":\"tuple\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.EmployeePayload[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"loanOrAdvanceStr\",\"type\":\"string\"}],\"name\":\"requestAdvanceOrLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"save4Me\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"acceptSaveForMe\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"sendPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"sendPayment(uint256,bool,uint256,uint256)\":{\"details\":\"Employers pay employees Employees addition are not accepted at this point.  Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid Note: pay() is atomic by context i.e transfer to all employees must pass simultaneously.      Employers should ensure enough allowance is given to cover the pays.  Note: Employers can select the range of empployees to pay. This is done using the { start } and { stop } flags.       These flags neither can exceed the number of employees in storage nor can start eceeds stop.\",\"params\":{\"acceptSaveForMe\":\": Employer should specify if they're willing to save for employees by holding their pay in custody until otherwise canceled by the employee.                           This attracts interests compounded on the principal pay. \",\"employeeId\":\": Id assigned to employee at registration point. It corresponds to their position in the EmployeePayload array.\",\"start\":\": The starting point precision to start payment.\",\"stop\":\": Position or index where payments should stop  Note: Employer should give enough allowance correspond to cUSD balance to cover the expected payment range.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol\":\"LoanAndSalaryAdvance\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/loanAndSalaryAdvance/ILoanAndSalaryAdvance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface ILoanAndSalaryAdvance {\\r\\n    error TransferFromFailed();\\r\\n\\r\\n    enum AdvanceRequestStatus {NONE, PENDING, DISBURSED, SERVICED}\\r\\n    enum LoanRequestStatus {NONE, REQUESTED, RESPONDED, ACCEPTED, SERVICED}\\r\\n    struct EmployeePayload {\\r\\n        address identifier;\\r\\n        uint workId;\\r\\n        bool active;\\r\\n        bool saveForMe;\\r\\n        uint pay;\\r\\n        uint8 saveForMeRate;\\r\\n        uint8 amortizationRate;\\r\\n        AdvanceRequest advanceReq;\\r\\n        LoanRequest loanReq;\\r\\n    }\\r\\n\\r\\n    struct AdvanceRequest {\\r\\n        uint amount;\\r\\n        uint amortizationAmt;\\r\\n        AdvanceRequestStatus status;\\r\\n    }\\r\\n\\r\\n    struct LoanRequest {\\r\\n        uint amount;\\r\\n        uint interest;\\r\\n        uint amortizationAmt;\\r\\n        LoanRequestStatus status;\\r\\n    }\\r\\n\\r\\n    // struct EmployerInfo {\\r\\n    //     bool isEmployer;\\r\\n    //     uint id;\\r\\n    // }\\r\\n\\r\\n    function sendPayment(uint employeeId, bool acceptSaveForMe, uint start, uint stop) external returns(bool);\\r\\n    function save4Me(address employerAddr, uint employeeId, bool value) external returns(bool);\\r\\n    function acceptOrRejectLoanApproval(address employerAddr, uint employeeId, string memory acceptOrRejectStr) external returns(bool);\\r\\n    function approveLoanOrAdvanceRequest(uint employeeId, uint8 interestRate, uint8 amortizationRate, string memory loanOrAdvanceStr) external returns(bool);\\r\\n    function requestAdvanceOrLoan(address employerAddr, uint employeeId, uint amount, string memory loanOrAdvanceStr) external returns(bool);\\r\\n    function disableOrEnableEmployee(uint employeeId, bool value) external returns(bool);\\r\\n    function addEmployee(address[] memory addresses, uint256[] memory payments, uint8 saveForMeRate, uint8 amortizationRate) external returns(bool done);\\r\\n    \\r\\n}\",\"keccak256\":\"0xfe91656a6f732ac6573a379e1e5f6d13b6325dab75ba922c352990da8662580d\",\"license\":\"MIT\"},\"contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\n\\r\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport { ILoanAndSalaryAdvance } from \\\"./ILoanAndSalaryAdvance.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ncontract LoanAndSalaryAdvance is Context, ILoanAndSalaryAdvance {\\r\\n    address public immutable cUSD;\\r\\n    bytes32 public immutable LOAN_HASH;\\r\\n    bytes32 public immutable ADVANCE_HASH;\\r\\n    bytes32 public immutable ACCEPTED_HASH;\\r\\n    bytes32 public immutable REJECTED_HASH;\\r\\n\\r\\n    mapping (address => EmployeePayload[]) public employees;\\r\\n    mapping (address => mapping (address => bool)) private isAdded;\\r\\n\\r\\n    modifier validateEmployeeId(uint employeeId, address employer) {\\r\\n        require(employeeId < employees[employer].length, \\\"Invalid employeeId\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (address _cUSD) {\\r\\n        if(_cUSD == address(0)) revert();\\r\\n        cUSD = _cUSD;\\r\\n        LOAN_HASH = _toHash(\\\"LOAN\\\");\\r\\n        ADVANCE_HASH = _toHash(\\\"ADVANCE\\\");\\r\\n        ACCEPTED_HASH = _toHash(\\\"ACCEPTED\\\");\\r\\n        REJECTED_HASH = _toHash(\\\"REJECTED\\\");\\r\\n    }\\r\\n\\r\\n    receive() external payable { revert(); }\\r\\n\\r\\n    function _toHash(string memory loanOrHashStr) internal pure returns(bytes32 _hash) {\\r\\n        return keccak256(abi.encode(loanOrHashStr));\\r\\n    }\\r\\n\\r\\n    function _sendPayment(address from, address to, uint amount) private {\\r\\n        if(!IERC20(cUSD).transferFrom(from, to, amount)) revert TransferFromFailed();\\r\\n    }\\r\\n\\r\\n    function _amortize(address employerAddr, uint employeeId, EmployeePayload memory pld) internal returns(uint payBalance) {\\r\\n        if(pld.loanReq.amount > 0) {\\r\\n            uint loanBal = pld.loanReq.amount;\\r\\n            pld.loanReq.amortizationAmt <= loanBal? \\r\\n                (loanBal -= pld.loanReq.amortizationAmt, payBalance = pld.pay - pld.loanReq.amortizationAmt) : \\r\\n                    (loanBal -= loanBal, payBalance = pld.pay - loanBal);\\r\\n            employees[employerAddr][employeeId].loanReq.amount = loanBal;\\r\\n            if(loanBal > 0) {\\r\\n                employees[employerAddr][employeeId].loanReq.status = LoanRequestStatus.SERVICED;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(pld.advanceReq.amount > 0) {\\r\\n            uint loanBal = pld.advanceReq.amount;\\r\\n            pld.advanceReq.amortizationAmt <= loanBal? \\r\\n                (loanBal -= pld.advanceReq.amortizationAmt, payBalance = pld.pay - pld.advanceReq.amortizationAmt) : \\r\\n                    (loanBal -= loanBal, payBalance = pld.pay - loanBal);\\r\\n            employees[employerAddr][employeeId].advanceReq.amount = loanBal;\\r\\n            if(loanBal > 0) {\\r\\n                employees[employerAddr][employeeId].advanceReq.status = AdvanceRequestStatus.SERVICED;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function addEmployee(address[] memory addresses, uint256[] memory payments, uint8 saveForMeRate, uint8 amortizationRate) public returns(bool done) {\\r\\n        address sender = _msgSender();\\r\\n        uint addressLength = addresses.length;\\r\\n        require(addressLength == payments.length, \\\"Addresses to payment mismatch\\\");\\r\\n        for(uint8 i = 0; i < addressLength; i++) {\\r\\n            address addr = addresses[i];\\r\\n            if(addr != address(0)) {\\r\\n                if(!isAdded[sender][addr]) {\\r\\n                    isAdded[sender][addr] = true;\\r\\n                    employees[sender].push(EmployeePayload( addr, i, true, false, payments[i], saveForMeRate, amortizationRate, AdvanceRequest(0, 0, AdvanceRequestStatus(0)), LoanRequest(0, 0, 0, LoanRequestStatus(0))));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return done;\\r\\n    }\\r\\n\\r\\n    function disableOrEnableEmployee(uint employeeId, bool value) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, _msgSender()) \\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory emp = employees[sender][employeeId];\\r\\n        if(value) {\\r\\n            require(!emp.active, \\\"Enabled\\\");\\r\\n        } else {\\r\\n            require(emp.active, \\\"Disabled\\\");\\r\\n        }\\r\\n        employees[sender][employeeId].active = value;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function requestAdvanceOrLoan(address employerAddr, uint employeeId, uint amount, string memory loanOrAdvanceStr) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, employerAddr) \\r\\n        returns(bool) \\r\\n    {\\r\\n        EmployeePayload memory pld = employees[employerAddr][employeeId];\\r\\n        string memory errorMessage = \\\"You have pending request\\\";\\r\\n        bool condition;\\r\\n        if(_toHash(loanOrAdvanceStr) == ADVANCE_HASH) {\\r\\n            condition = pld.advanceReq.status == AdvanceRequestStatus.NONE || pld.advanceReq.status == AdvanceRequestStatus.SERVICED;\\r\\n            require(amount <= pld.pay, \\\"Advance cannot exceed Salary\\\");\\r\\n            employees[employerAddr][employeeId].advanceReq = AdvanceRequest(amount, 0, AdvanceRequestStatus.PENDING);\\r\\n        } else if(_toHash(loanOrAdvanceStr) == LOAN_HASH) {\\r\\n            condition = pld.loanReq.status == LoanRequestStatus.NONE || pld.loanReq.status == LoanRequestStatus.SERVICED;\\r\\n            errorMessage = \\\"You have pending loan request\\\";\\r\\n            employees[employerAddr][employeeId].loanReq = LoanRequest(amount, 0, 0, LoanRequestStatus.REQUESTED);\\r\\n        } else {\\r\\n            revert(loanOrAdvanceStr);\\r\\n        }\\r\\n        require(condition, errorMessage);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approveLoanOrAdvanceRequest(uint employeeId, uint8 interestRate, uint8 amortizationRate, string memory loanOrAdvanceStr) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, _msgSender()) \\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory pld = employees[sender][employeeId];\\r\\n        require(pld.active, \\\"Disabled\\\");\\r\\n        uint allowance = IERC20(cUSD).allowance(sender, address(this));\\r\\n        uint interest = (allowance * interestRate) / 100;\\r\\n        uint amortizationAmt = ((allowance + interest) * amortizationRate) / 100;\\r\\n        require(amortizationAmt <= pld.pay, \\\"Amortization exceeds pay\\\");\\r\\n        if(_toHash(loanOrAdvanceStr) == ADVANCE_HASH) {\\r\\n            require(pld.advanceReq.status == AdvanceRequestStatus.PENDING, \\\"Invalid request\\\");\\r\\n            employees[sender][employeeId].advanceReq = AdvanceRequest(allowance, amortizationAmt, AdvanceRequestStatus.DISBURSED);\\r\\n            _sendPayment(sender, pld.identifier, allowance);\\r\\n        } else if(_toHash(loanOrAdvanceStr) == LOAN_HASH) {\\r\\n            require(pld.loanReq.status == LoanRequestStatus.REQUESTED, \\\"Invalid request\\\");\\r\\n            employees[sender][employeeId].loanReq = LoanRequest(\\r\\n                allowance + interest,\\r\\n                interest,\\r\\n                amortizationAmt,\\r\\n                LoanRequestStatus.RESPONDED\\r\\n            );\\r\\n        } else {\\r\\n            revert (loanOrAdvanceStr);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function acceptOrRejectLoanApproval(address employerAddr, uint employeeId, string memory acceptOrRejectStr) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, employerAddr)\\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory emp = employees[sender][employeeId];\\r\\n        uint allowance = IERC20(cUSD).allowance(employerAddr, address(this));\\r\\n        require(sender == emp.identifier, \\\"UnAuthorized call\\\");\\r\\n        if(allowance > 0) {\\r\\n            if(_toHash(acceptOrRejectStr) == ACCEPTED_HASH) {\\r\\n                employees[sender][employeeId].loanReq.status = LoanRequestStatus.ACCEPTED;\\r\\n                _sendPayment(employerAddr, emp.identifier, allowance);\\r\\n            } else if(_toHash(acceptOrRejectStr) == REJECTED_HASH) {\\r\\n                delete employees[sender][employeeId].loanReq;\\r\\n            } else {\\r\\n                revert (acceptOrRejectStr);\\r\\n            }\\r\\n        } else {\\r\\n            delete employees[sender][employeeId].loanReq;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function save4Me(address employerAddr, uint employeeId, bool value)\\r\\n        public\\r\\n        validateEmployeeId(employeeId, employerAddr) \\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory emp = employees[sender][employeeId];\\r\\n        require(sender == emp.identifier, \\\"UnAuthorized call\\\");\\r\\n        employees[sender][employeeId].saveForMe = value;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**@dev Employers pay employees\\r\\n     * Employees addition are not accepted at this point. \\r\\n     * Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid\\r\\n     * Note: pay() is atomic by context i.e transfer to all employees must pass simultaneously.\\r\\n     *      Employers should ensure enough allowance is given to cover the pays.\\r\\n     * \\r\\n     * Note: Employers can select the range of empployees to pay. This is done using the { start } and { stop } flags.\\r\\n     *       These flags neither can exceed the number of employees in storage nor can start eceeds stop.\\r\\n     * @param employeeId : Id assigned to employee at registration point. It corresponds to their position in the EmployeePayload array.\\r\\n     * @param acceptSaveForMe : Employer should specify if they're willing to save for employees by holding their pay in custody until otherwise canceled by the employee. \\r\\n     *                          This attracts interests compounded on the principal pay. \\r\\n     * @param start : The starting point precision to start payment.\\r\\n     * @param stop : Position or index where payments should stop\\r\\n     * \\r\\n     * Note: Employer should give enough allowance correspond to cUSD balance to cover the expected payment range.\\r\\n     */\\r\\n    function sendPayment(uint employeeId, bool acceptSaveForMe, uint start, uint stop) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, _msgSender())\\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload[] memory plds = employees[sender];\\r\\n        require(start < stop && stop <= plds.length, \\\"Invalid range selected\\\");\\r\\n        for(uint i = start > 0? start - 1 : start; i < stop; i++) {\\r\\n            uint allowance = IERC20(cUSD).allowance(sender, address(this));\\r\\n            EmployeePayload memory pld = plds[i];\\r\\n            uint pay = _amortize(sender, i, pld);\\r\\n            require(allowance >= pay, \\\"Not enough balance\\\");\\r\\n            if(!pld.saveForMe) {\\r\\n                _sendPayment(sender, pld.identifier, pay);\\r\\n            }\\r\\n            if(pld.saveForMe && acceptSaveForMe) {\\r\\n                employees[sender][employeeId].pay += (pld.pay + ((pld.pay * pld.saveForMeRate) / 100));\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getEmployees(address employerAddr) public view returns(EmployeePayload[] memory) {\\r\\n        return employees[employerAddr];\\r\\n    }\\r\\n}\",\"keccak256\":\"0xdc83c8036cebc1ad781dd29f5af047b7080ca302bc05df80cf0044900197f6ea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162003065380380620030658339810160408190526200003591620001bc565b600160a060020a0381166200004957600080fd5b600160a060020a03811660805260408051808201909152600481527f4c4f414e0000000000000000000000000000000000000000000000000000000060208201526200009e906401000000006200018a810204565b60a05260408051808201909152600781527f414456414e4345000000000000000000000000000000000000000000000000006020820152620000e9906401000000006200018a810204565b60c05260408051808201909152600881527f4143434550544544000000000000000000000000000000000000000000000000602082015262000134906401000000006200018a810204565b60e05260408051808201909152600881527f52454a454354454400000000000000000000000000000000000000000000000060208201526200017f906401000000006200018a810204565b61010052506200023e565b6000816040516020016200019f9190620001ee565b604051602081830303815290604052805190602001209050919050565b600060208284031215620001cf57600080fd5b8151600160a060020a0381168114620001e757600080fd5b9392505050565b600060208083528351808285015260005b818110156200021d57858101830151858201604001528201620001ff565b506000604082860101526040601f19601f8301168501019250505092915050565b60805160a05160c05160e05161010051612d9c620002c9600039600081816102c301526118b901526000818161036b0152611816015260008181610221015281816105770152611cea015260008181610337015281816106e10152611e33015260008181610188015281816113960152818161173901528181611bdd01526125290152612d9c6000f3fe6080604052600436106100fd576000357c0100000000000000000000000000000000000000000000000000000000900480637462eb071161009c57806393e5cb4e1161007657806393e5cb4e146102e5578063b2bf0bab14610305578063c5a5955e14610325578063ddfa43241461035957600080fd5b80637462eb071461027157806381a0941614610291578063883281c4146102b157600080fd5b80634cf635c2116100d85780634cf635c2146101c25780635ed11694146101ef5780635fdc32d11461020f57806371a0a6fb1461025157600080fd5b80624ead361461010c5780630fd7d154146101415780631fccf6721461017657600080fd5b3661010757600080fd5b600080fd5b34801561011857600080fd5b5061012c6101273660046126a7565b61038d565b60405190151581526020015b60405180910390f35b34801561014d57600080fd5b5061016161015c366004612708565b610892565b604051610138999897969594939291906127b1565b34801561018257600080fd5b506101aa7f000000000000000000000000000000000000000000000000000000000000000081565b604051600160a060020a039091168152602001610138565b3480156101ce57600080fd5b506101e26101dd36600461281a565b6109ba565b6040516101389190612835565b3480156101fb57600080fd5b5061012c61020a366004612996565b610b50565b34801561021b57600080fd5b506102437f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610138565b34801561025d57600080fd5b5061012c61026c366004612a85565b610eb3565b34801561027d57600080fd5b5061012c61028c366004612ac5565b611116565b34801561029d57600080fd5b5061012c6102ac366004612b02565b611558565b3480156102bd57600080fd5b506102437f000000000000000000000000000000000000000000000000000000000000000081565b3480156102f157600080fd5b5061012c610300366004612b59565b6119b1565b34801561031157600080fd5b5061012c610320366004612ba9565b611fba565b34801561033157600080fd5b506102437f000000000000000000000000000000000000000000000000000000000000000081565b34801561036557600080fd5b506102437f000000000000000000000000000000000000000000000000000000000000000081565b600160a060020a0384166000908152602081905260408120548490869082106103d45760405160e560020a62461bcd0281526004016103cb90612bd9565b60405180910390fd5b600160a060020a03871660009081526020819052604081208054889081106103fe576103fe612c10565b60009182526020918290206040805161012081018252600c9093029091018054600160a060020a03168352600181015483850152600281015460ff80821615158585015261010091829004811615156060808701919091526003808501546080880152600485015480841660a089015293909304821660c087015284519081018552600584018054825260068501549782019790975260078401549596939560e08801959194939185019216908111156104ba576104ba612732565b60038111156104cb576104cb612732565b815250508152602001600882016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600481111561052557610525612732565b600481111561053657610536612732565b90525090525060408051808201909152601881527f596f7520686176652070656e64696e6720726571756573740000000000000000602082015290915060007f000000000000000000000000000000000000000000000000000000000000000061059f88612260565b036106df5760008360e001516040015160038111156105c0576105c0612732565b14806105e5575060038360e001516040015160038111156105e3576105e3612732565b145b9050826080015188111561063e5760405160e560020a62461bcd02815260206004820152601c60248201527f416476616e63652063616e6e6f74206578636565642053616c6172790000000060448201526064016103cb565b604080516060810182528981526000602082015290810160019052600160a060020a038b16600090815260208190526040902080548b90811061068357610683612c10565b90600052602060002090600c0201600501600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360038111156106d2576106d2612732565b021790555090505061085f565b7f000000000000000000000000000000000000000000000000000000000000000061070988612260565b0361084257600083610100015160600151600481111561072b5761072b612732565b14806107515750600483610100015160600151600481111561074f5761074f612732565b145b90506040518060400160405280601d81526020017f596f7520686176652070656e64696e67206c6f616e2072657175657374000000815250915060405180608001604052808981526020016000815260200160008152602001600160048111156107bd576107bd612732565b9052600160a060020a038b16600090815260208190526040902080548b9081106107e9576107e9612c10565b90600052602060002090600c020160080160008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908360048111156106d2576106d2612732565b8660405160e560020a62461bcd0281526004016103cb9190612c29565b81816108815760405160e560020a62461bcd0281526004016103cb9190612c29565b5060019a9950505050505050505050565b600060205281600052604060002081815481106108ae57600080fd5b6000918252602091829020600c90910201805460018201546002830154600380850154600486015460408051606081018252600589018054825260068a01549a82019a909a526007890154600160a060020a039098169b5095995060ff80861699610100968790048216999498848316989790940482169694959093928501929091169081111561094157610941612732565b600381111561095257610952612732565b90525060408051608081018252600884018054825260098501546020830152600a85015492820192909252600b840154929392909190606083019060ff1660048111156109a1576109a1612732565b60048111156109b2576109b2612732565b905250905089565b600160a060020a038116600090815260208181526040808320805482518185028101850190935280835260609492939192909184015b82821015610b455760008481526020908190206040805161012081018252600c86029092018054600160a060020a03168352600181015483850152600281015460ff80821615158585015261010091829004811615156060808701919091526003808501546080880152600485015480841660a089015293909304821660c087015284519081018552600584018054825260068501549782019790975260078401549596939560e0880195919493918501921690811115610ab357610ab3612732565b6003811115610ac457610ac4612732565b815250508152602001600882016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115610b1e57610b1e612732565b6004811115610b2f57610b2f612732565b90525090525081526001909101906020016109f0565b505050509050919050565b8351835160009133918114610baa5760405160e560020a62461bcd02815260206004820152601d60248201527f41646472657373657320746f207061796d656e74206d69736d6174636800000060448201526064016103cb565b60005b818160ff161015610ea8576000888260ff1681518110610bcf57610bcf612c10565b602002602001015190506000600160a060020a031681600160a060020a031614610e9557600160a060020a0380851660009081526001602090815260408083209385168352929052205460ff16610e9557600160a060020a038085166000818152600160208181526040808420958716808552958252808420805460ff19168417905593835282815283832084516101208101865295865260ff88169186018290529385019190915260608401919091528a5191929160808301918c918110610c9a57610c9a612c10565b602002602001015181526020018960ff1681526020018860ff1681526020016040518060600160405280600081526020016000815260200160006003811115610ce557610ce5612732565b6003811115610cf657610cf6612732565b8152508152602001604051806080016040528060008152602001600081526020016000815260200160006004811115610d3157610d31612732565b6004811115610d4257610d42612732565b9052905281546001808201845560009384526020938490208351600c90930201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039093169290921782558284015182820155604080840151600284018054606087015161ffff1991821693151561ff00191693909317610100931515840217909155608086015160038087019190915560a087015160048701805460c08a015160ff93841691909516179190931690930292909217905560e085015180516005860190815596810151600686015591820151600785018054969795969395949193909260ff1990911691908490811115610e3e57610e3e612732565b02179055505050610100820151805160088301908155602082015160098401556040820151600a8401556060820151600b8401805460ff19166001836004811115610e8b57610e8b612732565b0217905550505050505b5080610ea081612c90565b915050610bad565b505050949350505050565b600160a060020a038316600090815260208190526040812054839085908210610ef15760405160e560020a62461bcd0281526004016103cb90612bd9565b336000818152602081905260408120805488908110610f1257610f12612c10565b60009182526020918290206040805161012081018252600c9093029091018054600160a060020a03168352600181015483850152600281015460ff80821615158585015261010091829004811615156060808701919091526003808501546080880152600485015480841660a089015293909304821660c087015284519081018552600584018054825260068501549782019790975260078401549596939560e0880195919493918501921690811115610fce57610fce612732565b6003811115610fdf57610fdf612732565b815250508152602001600882016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600481111561103957611039612732565b600481111561104a5761104a612732565b9052509052508051909150600160a060020a038381169116146110b25760405160e560020a62461bcd02815260206004820152601160248201527f556e417574686f72697a65642063616c6c00000000000000000000000000000060448201526064016103cb565b600160a060020a03821660009081526020819052604090208054879190899081106110df576110df612c10565b90600052602060002090600c020160020160016101000a81548160ff02191690831515021790555060019450505050509392505050565b3360008181526020819052604081205490918691821061114b5760405160e560020a62461bcd0281526004016103cb90612bd9565b3360008181526020818152604080832080548251818502810185019093528083529192909190849084015b828210156112cb5760008481526020908190206040805161012081018252600c86029092018054600160a060020a03168352600181015483850152600281015460ff80821615158585015261010091829004811615156060808701919091526003808501546080880152600485015480841660a089015293909304821660c087015284519081018552600584018054825260068501549782019790975260078401549596939560e088019591949391850192169081111561123957611239612732565b600381111561124a5761124a612732565b815250508152602001600882016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660048111156112a4576112a4612732565b60048111156112b5576112b5612732565b9052509052508152600190910190602001611176565b50505050905085871080156112e1575080518611155b6113305760405160e560020a62461bcd02815260206004820152601660248201527f496e76616c69642072616e67652073656c65637465640000000000000000000060448201526064016103cb565b600080881161133f578761134a565b61134a600189612caf565b90505b86811015611548576040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e90604401602060405180830381865afa1580156113df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114039190612cc8565b9050600083838151811061141957611419612c10565b602002602001015190506000611430868584612290565b9050808310156114855760405160e560020a62461bcd02815260206004820152601260248201527f4e6f7420656e6f7567682062616c616e6365000000000000000000000000000060448201526064016103cb565b816060015161149d5761149d868360000151836124e2565b816060015180156114ab57508b5b156115325760648260a0015160ff1683608001516114c99190612ce1565b6114d39190612cf8565b82608001516114e29190612d1d565b600160a060020a038716600090815260208190526040902080548f90811061150c5761150c612c10565b90600052602060002090600c0201600301600082825461152c9190612d1d565b90915550505b505050808061154090612d30565b91505061134d565b5060019998505050505050505050565b600160a060020a0383166000908152602081905260408120548390859082106115965760405160e560020a62461bcd0281526004016103cb90612bd9565b3360008181526020819052604081208054889081106115b7576115b7612c10565b60009182526020918290206040805161012081018252600c9093029091018054600160a060020a03168352600181015483850152600281015460ff80821615158585015261010091829004811615156060808701919091526003808501546080880152600485015480841660a089015293909304821660c087015284519081018552600584018054825260068501549782019790975260078401549596939560e088019591949391850192169081111561167357611673612732565b600381111561168457611684612732565b815250508152602001600882016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660048111156116de576116de612732565b60048111156116ef576116ef612732565b9052509052506040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a038a811660048301523060248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e90604401602060405180830381865afa158015611780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a49190612cc8565b90508160000151600160a060020a031683600160a060020a03161461180e5760405160e560020a62461bcd02815260206004820152601160248201527f556e417574686f72697a65642063616c6c00000000000000000000000000000060448201526064016103cb565b8015611946577f000000000000000000000000000000000000000000000000000000000000000061183e88612260565b036118b757600160a060020a03831660009081526020819052604090208054600391908a90811061187157611871612c10565b60009182526020909120600b600c9092020101805460ff1916600183600481111561189e5761189e612732565b02179055506118b2898360000151836124e2565b6119a2565b7f00000000000000000000000000000000000000000000000000000000000000006118e188612260565b0361084257600160a060020a038316600090815260208190526040902080548990811061191057611910612c10565b6000918252602082206008600c9092020190810182905560098101829055600a810191909155600b01805460ff191690556119a2565b600160a060020a038316600090815260208190526040902080548990811061197057611970612c10565b6000918252602082206008600c9092020190810182905560098101829055600a810191909155600b01805460ff191690555b50600198975050505050505050565b336000818152602081905260408120549091869182106119e65760405160e560020a62461bcd0281526004016103cb90612bd9565b33600081815260208190526040812080548a908110611a0757611a07612c10565b60009182526020918290206040805161012081018252600c9093029091018054600160a060020a03168352600181015483850152600281015460ff80821615158585015261010091829004811615156060808701919091526003808501546080880152600485015480841660a089015293909304821660c087015284519081018552600584018054825260068501549782019790975260078401549596939560e0880195919493918501921690811115611ac357611ac3612732565b6003811115611ad457611ad4612732565b815250508152602001600882016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115611b2e57611b2e612732565b6004811115611b3f57611b3f612732565b9052509052506040810151909150611b9c5760405160e560020a62461bcd02815260206004820152600860248201527f44697361626c656400000000000000000000000000000000000000000000000060448201526064016103cb565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a0383811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e90604401602060405180830381865afa158015611c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4a9190612cc8565b905060006064611c5d60ff8c1684612ce1565b611c679190612cf8565b90506000606460ff8b16611c7b8486612d1d565b611c859190612ce1565b611c8f9190612cf8565b90508360800151811115611ce85760405160e560020a62461bcd02815260206004820152601860248201527f416d6f7274697a6174696f6e206578636565647320706179000000000000000060448201526064016103cb565b7f0000000000000000000000000000000000000000000000000000000000000000611d128a612260565b03611e315760018460e00151604001516003811115611d3357611d33612732565b14611d835760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c69642072657175657374000000000000000000000000000000000060448201526064016103cb565b604080516060810182528481526020810183905290810160029052600160a060020a038616600090815260208190526040902080548e908110611dc857611dc8612c10565b90600052602060002090600c0201600501600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690836003811115611e1757611e17612732565b0217905550508451611e2c91508690856124e2565b611fa8565b7f0000000000000000000000000000000000000000000000000000000000000000611e5b8a612260565b03611f8b576001846101000151606001516004811115611e7d57611e7d612732565b14611ecd5760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c69642072657175657374000000000000000000000000000000000060448201526064016103cb565b60405180608001604052808385611ee49190612d1d565b8152602081018490526040810183905260600160029052600160a060020a038616600090815260208190526040902080548e908110611f2557611f25612c10565b90600052602060002090600c020160080160008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690836004811115611f7e57611f7e612732565b0217905550905050611fa8565b8860405160e560020a62461bcd0281526004016103cb9190612c29565b5060019b9a5050505050505050505050565b33600081815260208190526040812054909184918210611fef5760405160e560020a62461bcd0281526004016103cb90612bd9565b33600081815260208190526040812080548890811061201057612010612c10565b60009182526020918290206040805161012081018252600c9093029091018054600160a060020a03168352600181015483850152600281015460ff80821615158585015261010091829004811615156060808701919091526003808501546080880152600485015480841660a089015293909304821660c087015284519081018552600584018054825260068501549782019790975260078401549596939560e08801959194939185019216908111156120cc576120cc612732565b60038111156120dd576120dd612732565b815250508152602001600882016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600481111561213757612137612732565b600481111561214857612148612732565b905250905250905085156121b0578060400151156121ab5760405160e560020a62461bcd02815260206004820152600760248201527f456e61626c65640000000000000000000000000000000000000000000000000060448201526064016103cb565b612204565b80604001516122045760405160e560020a62461bcd02815260206004820152600860248201527f44697361626c656400000000000000000000000000000000000000000000000060448201526064016103cb565b600160a060020a038216600090815260208190526040902080548791908990811061223157612231612c10565b60009182526020909120600c90910201600201805460ff19169115159190911790555060019695505050505050565b6000816040516020016122739190612c29565b604051602081830303815290604052805190602001209050919050565b61010081015151600090156123b95761010082015180516040909101518110156122d9576122be8180612caf565b9050808184608001516122d19190612caf565b92508261230d565b610100830151604001516122ed9082612caf565b9050808361010001516040015184608001516123099190612caf565b9250825b5050600160a060020a038516600090815260208190526040902080548291908690811061233c5761233c612c10565b600091825260209091206008600c90920201015580156123b757600160a060020a03851660009081526020819052604090208054600491908690811061238457612384612c10565b60009182526020909120600b600c9092020101805460ff191660018360048111156123b1576123b1612732565b02179055505b505b60e082015151156124db5760e082015180516020909101518110156123fd576123e28180612caf565b9050808184608001516123f59190612caf565b92508261242f565b60e0830151602001516124109082612caf565b9050808360e0015160200151846080015161242b9190612caf565b9250825b5050600160a060020a038516600090815260208190526040902080548291908690811061245e5761245e612c10565b600091825260209091206005600c90920201015580156124d957600160a060020a0385166000908152602081905260409020805460039190869081106124a6576124a6612c10565b600091825260209091206007600c9092020101805460ff191660018360038111156124d3576124d3612732565b02179055505b505b9392505050565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301528381166024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af1158015612572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125969190612d49565b6125cc576040517f7939f42400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b8035600160a060020a03811681146125e857600080fd5b919050565b60e060020a634e487b7102600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561262f5761262f6125ed565b604052919050565b600082601f83011261264857600080fd5b813567ffffffffffffffff811115612662576126626125ed565b612675601f8201601f1916602001612606565b81815284602083860101111561268a57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156126bd57600080fd5b6126c6856125d1565b93506020850135925060408501359150606085013567ffffffffffffffff8111156126f057600080fd5b6126fc87828801612637565b91505092959194509250565b6000806040838503121561271b57600080fd5b612724836125d1565b946020939093013593505050565b60e060020a634e487b7102600052602160045260246000fd5b805182526020810151602083015260408101516004811061276e5761276e612732565b806040840152505050565b8051825260208101516020830152604081015160408301526060810151600581106127a6576127a6612732565b806060840152505050565b600160a060020a038a16815260208101899052871515604082015286151560608201526080810186905260ff85811660a0830152841660c08201526101c081016127fe60e083018561274b565b61280c610140830184612779565b9a9950505050505050505050565b60006020828403121561282c57600080fd5b6124db826125d1565b602080825282518282018190526000919060409081850190868401855b828110156128ec5781518051600160a060020a031685528681015187860152858101511515868601526060808201511515908601526080808201519086015260a08082015160ff9081169187019190915260c0808301519091169086015260e0808201516128c28288018261274b565b505061010001516128d7610140860182612779565b506101c0939093019290850190600101612852565b5091979650505050505050565b600067ffffffffffffffff821115612913576129136125ed565b5060209081020190565b600082601f83011261292e57600080fd5b8135602061294361293e836128f9565b612606565b8281529181028401810191818101908684111561295f57600080fd5b8286015b8481101561297a5780358352918301918301612963565b509695505050505050565b803560ff811681146125e857600080fd5b600080600080608085870312156129ac57600080fd5b843567ffffffffffffffff808211156129c457600080fd5b818701915087601f8301126129d857600080fd5b813560206129e861293e836128f9565b8281529181028401810191818101908b841115612a0457600080fd5b948201945b83861015612a2957612a1a866125d1565b82529482019490820190612a09565b98505088013592505080821115612a3f57600080fd5b50612a4c8782880161291d565b935050612a5b60408601612985565b9150612a6960608601612985565b905092959194509250565b8015158114612a8257600080fd5b50565b600080600060608486031215612a9a57600080fd5b612aa3846125d1565b9250602084013591506040840135612aba81612a74565b809150509250925092565b60008060008060808587031215612adb57600080fd5b843593506020850135612aed81612a74565b93969395505050506040820135916060013590565b600080600060608486031215612b1757600080fd5b612b20846125d1565b925060208401359150604084013567ffffffffffffffff811115612b4357600080fd5b612b4f86828701612637565b9150509250925092565b60008060008060808587031215612b6f57600080fd5b84359350612b7f60208601612985565b9250612b8d60408601612985565b9150606085013567ffffffffffffffff8111156126f057600080fd5b60008060408385031215612bbc57600080fd5b823591506020830135612bce81612a74565b809150509250929050565b60208082526012908201527f496e76616c696420656d706c6f79656549640000000000000000000000000000604082015260600190565b60e060020a634e487b7102600052603260045260246000fd5b600060208083528351808285015260005b81811015612c5657858101830151858201604001528201612c3a565b506000604082860101526040601f19601f8301168501019250505092915050565b60e060020a634e487b7102600052601160045260246000fd5b600060ff821660ff8103612ca657612ca6612c77565b60010192915050565b81810381811115612cc257612cc2612c77565b92915050565b600060208284031215612cda57600080fd5b5051919050565b8082028115828204841417612cc257612cc2612c77565b600082612d185760e060020a634e487b7102600052601260045260246000fd5b500490565b80820180821115612cc257612cc2612c77565b600060018201612d4257612d42612c77565b5060010190565b600060208284031215612d5b57600080fd5b81516124db81612a7456fea26469706673582212209445809282a1c9ae5b3e6676a0600b96b4000fd37ef2472769ef8bfca7aff8ac64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100fd576000357c0100000000000000000000000000000000000000000000000000000000900480637462eb071161009c57806393e5cb4e1161007657806393e5cb4e146102e5578063b2bf0bab14610305578063c5a5955e14610325578063ddfa43241461035957600080fd5b80637462eb071461027157806381a0941614610291578063883281c4146102b157600080fd5b80634cf635c2116100d85780634cf635c2146101c25780635ed11694146101ef5780635fdc32d11461020f57806371a0a6fb1461025157600080fd5b80624ead361461010c5780630fd7d154146101415780631fccf6721461017657600080fd5b3661010757600080fd5b600080fd5b34801561011857600080fd5b5061012c6101273660046126a7565b61038d565b60405190151581526020015b60405180910390f35b34801561014d57600080fd5b5061016161015c366004612708565b610892565b604051610138999897969594939291906127b1565b34801561018257600080fd5b506101aa7f000000000000000000000000000000000000000000000000000000000000000081565b604051600160a060020a039091168152602001610138565b3480156101ce57600080fd5b506101e26101dd36600461281a565b6109ba565b6040516101389190612835565b3480156101fb57600080fd5b5061012c61020a366004612996565b610b50565b34801561021b57600080fd5b506102437f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610138565b34801561025d57600080fd5b5061012c61026c366004612a85565b610eb3565b34801561027d57600080fd5b5061012c61028c366004612ac5565b611116565b34801561029d57600080fd5b5061012c6102ac366004612b02565b611558565b3480156102bd57600080fd5b506102437f000000000000000000000000000000000000000000000000000000000000000081565b3480156102f157600080fd5b5061012c610300366004612b59565b6119b1565b34801561031157600080fd5b5061012c610320366004612ba9565b611fba565b34801561033157600080fd5b506102437f000000000000000000000000000000000000000000000000000000000000000081565b34801561036557600080fd5b506102437f000000000000000000000000000000000000000000000000000000000000000081565b600160a060020a0384166000908152602081905260408120548490869082106103d45760405160e560020a62461bcd0281526004016103cb90612bd9565b60405180910390fd5b600160a060020a03871660009081526020819052604081208054889081106103fe576103fe612c10565b60009182526020918290206040805161012081018252600c9093029091018054600160a060020a03168352600181015483850152600281015460ff80821615158585015261010091829004811615156060808701919091526003808501546080880152600485015480841660a089015293909304821660c087015284519081018552600584018054825260068501549782019790975260078401549596939560e08801959194939185019216908111156104ba576104ba612732565b60038111156104cb576104cb612732565b815250508152602001600882016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600481111561052557610525612732565b600481111561053657610536612732565b90525090525060408051808201909152601881527f596f7520686176652070656e64696e6720726571756573740000000000000000602082015290915060007f000000000000000000000000000000000000000000000000000000000000000061059f88612260565b036106df5760008360e001516040015160038111156105c0576105c0612732565b14806105e5575060038360e001516040015160038111156105e3576105e3612732565b145b9050826080015188111561063e5760405160e560020a62461bcd02815260206004820152601c60248201527f416476616e63652063616e6e6f74206578636565642053616c6172790000000060448201526064016103cb565b604080516060810182528981526000602082015290810160019052600160a060020a038b16600090815260208190526040902080548b90811061068357610683612c10565b90600052602060002090600c0201600501600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360038111156106d2576106d2612732565b021790555090505061085f565b7f000000000000000000000000000000000000000000000000000000000000000061070988612260565b0361084257600083610100015160600151600481111561072b5761072b612732565b14806107515750600483610100015160600151600481111561074f5761074f612732565b145b90506040518060400160405280601d81526020017f596f7520686176652070656e64696e67206c6f616e2072657175657374000000815250915060405180608001604052808981526020016000815260200160008152602001600160048111156107bd576107bd612732565b9052600160a060020a038b16600090815260208190526040902080548b9081106107e9576107e9612c10565b90600052602060002090600c020160080160008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908360048111156106d2576106d2612732565b8660405160e560020a62461bcd0281526004016103cb9190612c29565b81816108815760405160e560020a62461bcd0281526004016103cb9190612c29565b5060019a9950505050505050505050565b600060205281600052604060002081815481106108ae57600080fd5b6000918252602091829020600c90910201805460018201546002830154600380850154600486015460408051606081018252600589018054825260068a01549a82019a909a526007890154600160a060020a039098169b5095995060ff80861699610100968790048216999498848316989790940482169694959093928501929091169081111561094157610941612732565b600381111561095257610952612732565b90525060408051608081018252600884018054825260098501546020830152600a85015492820192909252600b840154929392909190606083019060ff1660048111156109a1576109a1612732565b60048111156109b2576109b2612732565b905250905089565b600160a060020a038116600090815260208181526040808320805482518185028101850190935280835260609492939192909184015b82821015610b455760008481526020908190206040805161012081018252600c86029092018054600160a060020a03168352600181015483850152600281015460ff80821615158585015261010091829004811615156060808701919091526003808501546080880152600485015480841660a089015293909304821660c087015284519081018552600584018054825260068501549782019790975260078401549596939560e0880195919493918501921690811115610ab357610ab3612732565b6003811115610ac457610ac4612732565b815250508152602001600882016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115610b1e57610b1e612732565b6004811115610b2f57610b2f612732565b90525090525081526001909101906020016109f0565b505050509050919050565b8351835160009133918114610baa5760405160e560020a62461bcd02815260206004820152601d60248201527f41646472657373657320746f207061796d656e74206d69736d6174636800000060448201526064016103cb565b60005b818160ff161015610ea8576000888260ff1681518110610bcf57610bcf612c10565b602002602001015190506000600160a060020a031681600160a060020a031614610e9557600160a060020a0380851660009081526001602090815260408083209385168352929052205460ff16610e9557600160a060020a038085166000818152600160208181526040808420958716808552958252808420805460ff19168417905593835282815283832084516101208101865295865260ff88169186018290529385019190915260608401919091528a5191929160808301918c918110610c9a57610c9a612c10565b602002602001015181526020018960ff1681526020018860ff1681526020016040518060600160405280600081526020016000815260200160006003811115610ce557610ce5612732565b6003811115610cf657610cf6612732565b8152508152602001604051806080016040528060008152602001600081526020016000815260200160006004811115610d3157610d31612732565b6004811115610d4257610d42612732565b9052905281546001808201845560009384526020938490208351600c90930201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039093169290921782558284015182820155604080840151600284018054606087015161ffff1991821693151561ff00191693909317610100931515840217909155608086015160038087019190915560a087015160048701805460c08a015160ff93841691909516179190931690930292909217905560e085015180516005860190815596810151600686015591820151600785018054969795969395949193909260ff1990911691908490811115610e3e57610e3e612732565b02179055505050610100820151805160088301908155602082015160098401556040820151600a8401556060820151600b8401805460ff19166001836004811115610e8b57610e8b612732565b0217905550505050505b5080610ea081612c90565b915050610bad565b505050949350505050565b600160a060020a038316600090815260208190526040812054839085908210610ef15760405160e560020a62461bcd0281526004016103cb90612bd9565b336000818152602081905260408120805488908110610f1257610f12612c10565b60009182526020918290206040805161012081018252600c9093029091018054600160a060020a03168352600181015483850152600281015460ff80821615158585015261010091829004811615156060808701919091526003808501546080880152600485015480841660a089015293909304821660c087015284519081018552600584018054825260068501549782019790975260078401549596939560e0880195919493918501921690811115610fce57610fce612732565b6003811115610fdf57610fdf612732565b815250508152602001600882016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600481111561103957611039612732565b600481111561104a5761104a612732565b9052509052508051909150600160a060020a038381169116146110b25760405160e560020a62461bcd02815260206004820152601160248201527f556e417574686f72697a65642063616c6c00000000000000000000000000000060448201526064016103cb565b600160a060020a03821660009081526020819052604090208054879190899081106110df576110df612c10565b90600052602060002090600c020160020160016101000a81548160ff02191690831515021790555060019450505050509392505050565b3360008181526020819052604081205490918691821061114b5760405160e560020a62461bcd0281526004016103cb90612bd9565b3360008181526020818152604080832080548251818502810185019093528083529192909190849084015b828210156112cb5760008481526020908190206040805161012081018252600c86029092018054600160a060020a03168352600181015483850152600281015460ff80821615158585015261010091829004811615156060808701919091526003808501546080880152600485015480841660a089015293909304821660c087015284519081018552600584018054825260068501549782019790975260078401549596939560e088019591949391850192169081111561123957611239612732565b600381111561124a5761124a612732565b815250508152602001600882016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660048111156112a4576112a4612732565b60048111156112b5576112b5612732565b9052509052508152600190910190602001611176565b50505050905085871080156112e1575080518611155b6113305760405160e560020a62461bcd02815260206004820152601660248201527f496e76616c69642072616e67652073656c65637465640000000000000000000060448201526064016103cb565b600080881161133f578761134a565b61134a600189612caf565b90505b86811015611548576040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e90604401602060405180830381865afa1580156113df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114039190612cc8565b9050600083838151811061141957611419612c10565b602002602001015190506000611430868584612290565b9050808310156114855760405160e560020a62461bcd02815260206004820152601260248201527f4e6f7420656e6f7567682062616c616e6365000000000000000000000000000060448201526064016103cb565b816060015161149d5761149d868360000151836124e2565b816060015180156114ab57508b5b156115325760648260a0015160ff1683608001516114c99190612ce1565b6114d39190612cf8565b82608001516114e29190612d1d565b600160a060020a038716600090815260208190526040902080548f90811061150c5761150c612c10565b90600052602060002090600c0201600301600082825461152c9190612d1d565b90915550505b505050808061154090612d30565b91505061134d565b5060019998505050505050505050565b600160a060020a0383166000908152602081905260408120548390859082106115965760405160e560020a62461bcd0281526004016103cb90612bd9565b3360008181526020819052604081208054889081106115b7576115b7612c10565b60009182526020918290206040805161012081018252600c9093029091018054600160a060020a03168352600181015483850152600281015460ff80821615158585015261010091829004811615156060808701919091526003808501546080880152600485015480841660a089015293909304821660c087015284519081018552600584018054825260068501549782019790975260078401549596939560e088019591949391850192169081111561167357611673612732565b600381111561168457611684612732565b815250508152602001600882016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660048111156116de576116de612732565b60048111156116ef576116ef612732565b9052509052506040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a038a811660048301523060248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e90604401602060405180830381865afa158015611780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a49190612cc8565b90508160000151600160a060020a031683600160a060020a03161461180e5760405160e560020a62461bcd02815260206004820152601160248201527f556e417574686f72697a65642063616c6c00000000000000000000000000000060448201526064016103cb565b8015611946577f000000000000000000000000000000000000000000000000000000000000000061183e88612260565b036118b757600160a060020a03831660009081526020819052604090208054600391908a90811061187157611871612c10565b60009182526020909120600b600c9092020101805460ff1916600183600481111561189e5761189e612732565b02179055506118b2898360000151836124e2565b6119a2565b7f00000000000000000000000000000000000000000000000000000000000000006118e188612260565b0361084257600160a060020a038316600090815260208190526040902080548990811061191057611910612c10565b6000918252602082206008600c9092020190810182905560098101829055600a810191909155600b01805460ff191690556119a2565b600160a060020a038316600090815260208190526040902080548990811061197057611970612c10565b6000918252602082206008600c9092020190810182905560098101829055600a810191909155600b01805460ff191690555b50600198975050505050505050565b336000818152602081905260408120549091869182106119e65760405160e560020a62461bcd0281526004016103cb90612bd9565b33600081815260208190526040812080548a908110611a0757611a07612c10565b60009182526020918290206040805161012081018252600c9093029091018054600160a060020a03168352600181015483850152600281015460ff80821615158585015261010091829004811615156060808701919091526003808501546080880152600485015480841660a089015293909304821660c087015284519081018552600584018054825260068501549782019790975260078401549596939560e0880195919493918501921690811115611ac357611ac3612732565b6003811115611ad457611ad4612732565b815250508152602001600882016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115611b2e57611b2e612732565b6004811115611b3f57611b3f612732565b9052509052506040810151909150611b9c5760405160e560020a62461bcd02815260206004820152600860248201527f44697361626c656400000000000000000000000000000000000000000000000060448201526064016103cb565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a0383811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e90604401602060405180830381865afa158015611c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4a9190612cc8565b905060006064611c5d60ff8c1684612ce1565b611c679190612cf8565b90506000606460ff8b16611c7b8486612d1d565b611c859190612ce1565b611c8f9190612cf8565b90508360800151811115611ce85760405160e560020a62461bcd02815260206004820152601860248201527f416d6f7274697a6174696f6e206578636565647320706179000000000000000060448201526064016103cb565b7f0000000000000000000000000000000000000000000000000000000000000000611d128a612260565b03611e315760018460e00151604001516003811115611d3357611d33612732565b14611d835760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c69642072657175657374000000000000000000000000000000000060448201526064016103cb565b604080516060810182528481526020810183905290810160029052600160a060020a038616600090815260208190526040902080548e908110611dc857611dc8612c10565b90600052602060002090600c0201600501600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690836003811115611e1757611e17612732565b0217905550508451611e2c91508690856124e2565b611fa8565b7f0000000000000000000000000000000000000000000000000000000000000000611e5b8a612260565b03611f8b576001846101000151606001516004811115611e7d57611e7d612732565b14611ecd5760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c69642072657175657374000000000000000000000000000000000060448201526064016103cb565b60405180608001604052808385611ee49190612d1d565b8152602081018490526040810183905260600160029052600160a060020a038616600090815260208190526040902080548e908110611f2557611f25612c10565b90600052602060002090600c020160080160008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690836004811115611f7e57611f7e612732565b0217905550905050611fa8565b8860405160e560020a62461bcd0281526004016103cb9190612c29565b5060019b9a5050505050505050505050565b33600081815260208190526040812054909184918210611fef5760405160e560020a62461bcd0281526004016103cb90612bd9565b33600081815260208190526040812080548890811061201057612010612c10565b60009182526020918290206040805161012081018252600c9093029091018054600160a060020a03168352600181015483850152600281015460ff80821615158585015261010091829004811615156060808701919091526003808501546080880152600485015480841660a089015293909304821660c087015284519081018552600584018054825260068501549782019790975260078401549596939560e08801959194939185019216908111156120cc576120cc612732565b60038111156120dd576120dd612732565b815250508152602001600882016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600481111561213757612137612732565b600481111561214857612148612732565b905250905250905085156121b0578060400151156121ab5760405160e560020a62461bcd02815260206004820152600760248201527f456e61626c65640000000000000000000000000000000000000000000000000060448201526064016103cb565b612204565b80604001516122045760405160e560020a62461bcd02815260206004820152600860248201527f44697361626c656400000000000000000000000000000000000000000000000060448201526064016103cb565b600160a060020a038216600090815260208190526040902080548791908990811061223157612231612c10565b60009182526020909120600c90910201600201805460ff19169115159190911790555060019695505050505050565b6000816040516020016122739190612c29565b604051602081830303815290604052805190602001209050919050565b61010081015151600090156123b95761010082015180516040909101518110156122d9576122be8180612caf565b9050808184608001516122d19190612caf565b92508261230d565b610100830151604001516122ed9082612caf565b9050808361010001516040015184608001516123099190612caf565b9250825b5050600160a060020a038516600090815260208190526040902080548291908690811061233c5761233c612c10565b600091825260209091206008600c90920201015580156123b757600160a060020a03851660009081526020819052604090208054600491908690811061238457612384612c10565b60009182526020909120600b600c9092020101805460ff191660018360048111156123b1576123b1612732565b02179055505b505b60e082015151156124db5760e082015180516020909101518110156123fd576123e28180612caf565b9050808184608001516123f59190612caf565b92508261242f565b60e0830151602001516124109082612caf565b9050808360e0015160200151846080015161242b9190612caf565b9250825b5050600160a060020a038516600090815260208190526040902080548291908690811061245e5761245e612c10565b600091825260209091206005600c90920201015580156124d957600160a060020a0385166000908152602081905260409020805460039190869081106124a6576124a6612c10565b600091825260209091206007600c9092020101805460ff191660018360038111156124d3576124d3612732565b02179055505b505b9392505050565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301528381166024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af1158015612572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125969190612d49565b6125cc576040517f7939f42400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b8035600160a060020a03811681146125e857600080fd5b919050565b60e060020a634e487b7102600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561262f5761262f6125ed565b604052919050565b600082601f83011261264857600080fd5b813567ffffffffffffffff811115612662576126626125ed565b612675601f8201601f1916602001612606565b81815284602083860101111561268a57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156126bd57600080fd5b6126c6856125d1565b93506020850135925060408501359150606085013567ffffffffffffffff8111156126f057600080fd5b6126fc87828801612637565b91505092959194509250565b6000806040838503121561271b57600080fd5b612724836125d1565b946020939093013593505050565b60e060020a634e487b7102600052602160045260246000fd5b805182526020810151602083015260408101516004811061276e5761276e612732565b806040840152505050565b8051825260208101516020830152604081015160408301526060810151600581106127a6576127a6612732565b806060840152505050565b600160a060020a038a16815260208101899052871515604082015286151560608201526080810186905260ff85811660a0830152841660c08201526101c081016127fe60e083018561274b565b61280c610140830184612779565b9a9950505050505050505050565b60006020828403121561282c57600080fd5b6124db826125d1565b602080825282518282018190526000919060409081850190868401855b828110156128ec5781518051600160a060020a031685528681015187860152858101511515868601526060808201511515908601526080808201519086015260a08082015160ff9081169187019190915260c0808301519091169086015260e0808201516128c28288018261274b565b505061010001516128d7610140860182612779565b506101c0939093019290850190600101612852565b5091979650505050505050565b600067ffffffffffffffff821115612913576129136125ed565b5060209081020190565b600082601f83011261292e57600080fd5b8135602061294361293e836128f9565b612606565b8281529181028401810191818101908684111561295f57600080fd5b8286015b8481101561297a5780358352918301918301612963565b509695505050505050565b803560ff811681146125e857600080fd5b600080600080608085870312156129ac57600080fd5b843567ffffffffffffffff808211156129c457600080fd5b818701915087601f8301126129d857600080fd5b813560206129e861293e836128f9565b8281529181028401810191818101908b841115612a0457600080fd5b948201945b83861015612a2957612a1a866125d1565b82529482019490820190612a09565b98505088013592505080821115612a3f57600080fd5b50612a4c8782880161291d565b935050612a5b60408601612985565b9150612a6960608601612985565b905092959194509250565b8015158114612a8257600080fd5b50565b600080600060608486031215612a9a57600080fd5b612aa3846125d1565b9250602084013591506040840135612aba81612a74565b809150509250925092565b60008060008060808587031215612adb57600080fd5b843593506020850135612aed81612a74565b93969395505050506040820135916060013590565b600080600060608486031215612b1757600080fd5b612b20846125d1565b925060208401359150604084013567ffffffffffffffff811115612b4357600080fd5b612b4f86828701612637565b9150509250925092565b60008060008060808587031215612b6f57600080fd5b84359350612b7f60208601612985565b9250612b8d60408601612985565b9150606085013567ffffffffffffffff8111156126f057600080fd5b60008060408385031215612bbc57600080fd5b823591506020830135612bce81612a74565b809150509250929050565b60208082526012908201527f496e76616c696420656d706c6f79656549640000000000000000000000000000604082015260600190565b60e060020a634e487b7102600052603260045260246000fd5b600060208083528351808285015260005b81811015612c5657858101830151858201604001528201612c3a565b506000604082860101526040601f19601f8301168501019250505092915050565b60e060020a634e487b7102600052601160045260246000fd5b600060ff821660ff8103612ca657612ca6612c77565b60010192915050565b81810381811115612cc257612cc2612c77565b92915050565b600060208284031215612cda57600080fd5b5051919050565b8082028115828204841417612cc257612cc2612c77565b600082612d185760e060020a634e487b7102600052601260045260246000fd5b500490565b80820180821115612cc257612cc2612c77565b600060018201612d4257612d42612c77565b5060010190565b600060208284031215612d5b57600080fd5b81516124db81612a7456fea26469706673582212209445809282a1c9ae5b3e6676a0600b96b4000fd37ef2472769ef8bfca7aff8ac64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "sendPayment(uint256,bool,uint256,uint256)": {
        "details": "Employers pay employees Employees addition are not accepted at this point.  Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid Note: pay() is atomic by context i.e transfer to all employees must pass simultaneously.      Employers should ensure enough allowance is given to cover the pays.  Note: Employers can select the range of empployees to pay. This is done using the { start } and { stop } flags.       These flags neither can exceed the number of employees in storage nor can start eceeds stop.",
        "params": {
          "acceptSaveForMe": ": Employer should specify if they're willing to save for employees by holding their pay in custody until otherwise canceled by the employee.                           This attracts interests compounded on the principal pay. ",
          "employeeId": ": Id assigned to employee at registration point. It corresponds to their position in the EmployeePayload array.",
          "start": ": The starting point precision to start payment.",
          "stop": ": Position or index where payments should stop  Note: Employer should give enough allowance correspond to cUSD balance to cover the expected payment range."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 216,
        "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
        "label": "employees",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_struct(EmployeePayload)65_storage)dyn_storage)"
      },
      {
        "astId": 222,
        "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
        "label": "isAdded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(EmployeePayload)65_storage)dyn_storage": {
        "base": "t_struct(EmployeePayload)65_storage",
        "encoding": "dynamic_array",
        "label": "struct ILoanAndSalaryAdvance.EmployeePayload[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(AdvanceRequestStatus)38": {
        "encoding": "inplace",
        "label": "enum ILoanAndSalaryAdvance.AdvanceRequestStatus",
        "numberOfBytes": "1"
      },
      "t_enum(LoanRequestStatus)44": {
        "encoding": "inplace",
        "label": "enum ILoanAndSalaryAdvance.LoanRequestStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(EmployeePayload)65_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ILoanAndSalaryAdvance.EmployeePayload[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(EmployeePayload)65_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_struct(AdvanceRequest)73_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.AdvanceRequest",
        "members": [
          {
            "astId": 67,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 69,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amortizationAmt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 72,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(AdvanceRequestStatus)38"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(EmployeePayload)65_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.EmployeePayload",
        "members": [
          {
            "astId": 46,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "identifier",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 48,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "workId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 50,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "active",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 52,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "saveForMe",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 54,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "pay",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 56,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "saveForMeRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 58,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amortizationRate",
            "offset": 1,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 61,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "advanceReq",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(AdvanceRequest)73_storage"
          },
          {
            "astId": 64,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "loanReq",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(LoanRequest)83_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(LoanRequest)83_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.LoanRequest",
        "members": [
          {
            "astId": 75,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 77,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "interest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 79,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amortizationAmt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 82,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(LoanRequestStatus)44"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}