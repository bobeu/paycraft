{
  "address": "0xCc51A924173795a968b91C2791DD976b6a4a2db7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cUSD",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "TransferFromFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACCEPTED_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADVANCE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOAN_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REJECTED_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "acceptOrRejectStr",
          "type": "string"
        }
      ],
      "name": "acceptOrRejectLoanApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "saveForMeRate",
          "type": "uint8"
        }
      ],
      "name": "addEmployee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "interestRate",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "amortizationRate",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "loanOrAdvanceStr",
          "type": "string"
        }
      ],
      "name": "approveLoanOrAdvanceRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cUSD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "disableOrEnableEmployee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmployees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "identifier",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "employer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "workId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "saveForMe",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "pay",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "saveForMeRate",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "amortizationRate",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amortizationAmt",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ILoanAndSalaryAdvance.AdvanceRequestStatus",
                  "name": "status",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ILoanAndSalaryAdvance.AdvanceRequest",
              "name": "advanceReq",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "interest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amortizationAmt",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ILoanAndSalaryAdvance.LoanRequestStatus",
                  "name": "status",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ILoanAndSalaryAdvance.LoanRequest",
              "name": "loanReq",
              "type": "tuple"
            }
          ],
          "internalType": "struct ILoanAndSalaryAdvance.EmployeePayload[]",
          "name": "_returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        }
      ],
      "name": "preparePayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "amount",
          "type": "uint24"
        },
        {
          "internalType": "string",
          "name": "loanOrAdvanceStr",
          "type": "string"
        }
      ],
      "name": "requestAdvanceOrLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        }
      ],
      "name": "retrievEmployeePayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanBal",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLoan",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAdvance",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "save4Me",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "acceptSaveForMe",
          "type": "bool"
        }
      ],
      "name": "sendPayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd2befdefaac9795ab2073aa7332af8d9030cab5b0d44711dfde88a56be2b656c",
  "receipt": {
    "to": null,
    "from": "0x7624269a420c12395B743aCF327A61f91bd23b84",
    "contractAddress": "0xCc51A924173795a968b91C2791DD976b6a4a2db7",
    "transactionIndex": 0,
    "gasUsed": "2836643",
    "logsBloom": "0x
    "blockHash": "0xdb409166cc02745f6ade3a30c02a2ebcd54099fe7043b7cc7e0b1725670c00df",
    "transactionHash": "0xd2befdefaac9795ab2073aa7332af8d9030cab5b0d44711dfde88a56be2b656c",
    "logs": [],
    "blockNumber": 23670818,
    "cumulativeGasUsed": "2836643",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1"
  ],
  "numDeployments": 6,
  "solcInputHash": "5e5d664e9608ef03a44eaa52af6d1636",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cUSD\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TransferFromFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACCEPTED_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADVANCE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REJECTED_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"acceptOrRejectStr\",\"type\":\"string\"}],\"name\":\"acceptOrRejectLoanApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"saveForMeRate\",\"type\":\"uint8\"}],\"name\":\"addEmployee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"interestRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amortizationRate\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"loanOrAdvanceStr\",\"type\":\"string\"}],\"name\":\"approveLoanOrAdvanceRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"disableOrEnableEmployee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmployees\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"employer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"workId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"saveForMe\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pay\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"saveForMeRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amortizationRate\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amortizationAmt\",\"type\":\"uint256\"},{\"internalType\":\"enum ILoanAndSalaryAdvance.AdvanceRequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.AdvanceRequest\",\"name\":\"advanceReq\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amortizationAmt\",\"type\":\"uint256\"},{\"internalType\":\"enum ILoanAndSalaryAdvance.LoanRequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.LoanRequest\",\"name\":\"loanReq\",\"type\":\"tuple\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.EmployeePayload[]\",\"name\":\"_returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"}],\"name\":\"preparePayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"amount\",\"type\":\"uint24\"},{\"internalType\":\"string\",\"name\":\"loanOrAdvanceStr\",\"type\":\"string\"}],\"name\":\"requestAdvanceOrLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"}],\"name\":\"retrievEmployeePayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanBal\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLoan\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAdvance\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"save4Me\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"acceptSaveForMe\",\"type\":\"bool\"}],\"name\":\"sendPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"sendPayment(bool)\":{\"details\":\"Employers pay employees Employees addition are not accepted at this point.  Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid Note: pay() is atomic by context i.e transfer to all employees must pass simultaneously.      Employers should ensure enough allowance is given to cover the pays.  Note: Employers can select the range of empployees to pay. This is done using the { start } and { stop } flags.       These flags neither can exceed the number of employees in storage nor can start eceeds stop. param employeeId : Id assigned to employee at registration point. It corresponds to their position in the EmployeePayload array.\",\"params\":{\"acceptSaveForMe\":\": Employer should specify if they're willing to save for employees by holding their pay in custody until otherwise canceled by the employee.                           This attracts interests compounded on the principal pay.  Note: Employer should give enough allowance correspond to cUSD balance to cover the expected payment range.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol\":\"LoanAndSalaryAdvance\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/loanAndSalaryAdvance/ILoanAndSalaryAdvance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface ILoanAndSalaryAdvance {\\r\\n    error TransferFromFailed();\\r\\n\\r\\n    enum AdvanceRequestStatus {NONE, PENDING, DISBURSED, SERVICED}\\r\\n    enum LoanRequestStatus {NONE, REQUESTED, RESPONDED, ACCEPTED, SERVICED}\\r\\n    struct EmployeePayload {\\r\\n        address identifier;\\r\\n        address employer;\\r\\n        uint workId;\\r\\n        bool active;\\r\\n        bool saveForMe;\\r\\n        uint pay;\\r\\n        uint8 saveForMeRate;\\r\\n        uint8 amortizationRate;\\r\\n        AdvanceRequest advanceReq;\\r\\n        LoanRequest loanReq;\\r\\n    }\\r\\n\\r\\n    struct AdvanceRequest {\\r\\n        uint amount;\\r\\n        uint amortizationAmt;\\r\\n        AdvanceRequestStatus status;\\r\\n    }\\r\\n\\r\\n    struct LoanRequest {\\r\\n        uint amount;\\r\\n        uint interest;\\r\\n        uint amortizationAmt;\\r\\n        LoanRequestStatus status;\\r\\n    }\\r\\n\\r\\n    struct PendingPayment {\\r\\n        EmployeePayload payload;\\r\\n        uint snapshotBal;\\r\\n        uint64 callTime;\\r\\n    }\\r\\n\\r\\n    function preparePayment(uint employeeId) external returns(bool); \\r\\n    function retrievEmployeePayment(uint employeeId) external returns(uint payBalance, uint loanBal, bool isLoan, bool isAdvance);\\r\\n    function sendPayment(bool acceptSaveForMe) external returns(bool);\\r\\n    function save4Me(address employerAddr, uint employeeId, bool value) external returns(bool);\\r\\n    function acceptOrRejectLoanApproval(address employerAddr, uint employeeId, string memory acceptOrRejectStr) external returns(bool);\\r\\n    function approveLoanOrAdvanceRequest(uint employeeId, uint8 interestRate, uint8 amortizationRate, string memory loanOrAdvanceStr) external returns(bool);\\r\\n    function requestAdvanceOrLoan(address employerAddr, uint employeeId, uint24 amount, string memory loanOrAdvanceStr) external returns(bool);\\r\\n    function disableOrEnableEmployee(uint employeeId, bool value) external returns(bool);\\r\\n    function addEmployee(address addresses, uint256 payments, uint8 saveForMeRate) external returns(bool done);\\r\\n    \\r\\n}\",\"keccak256\":\"0x624c17de3f0a13d7061c308688e45ac6f87ef4d792d3e222e07243b7c05ffc4e\",\"license\":\"MIT\"},\"contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\n\\r\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport { ILoanAndSalaryAdvance } from \\\"./ILoanAndSalaryAdvance.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns(uint8);\\r\\n    function balanceOf(address _of) external view returns(uint256);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ncontract LoanAndSalaryAdvance is Context, ILoanAndSalaryAdvance {\\r\\n    address public immutable cUSD;\\r\\n    bytes32 public immutable LOAN_HASH;\\r\\n    bytes32 public immutable ADVANCE_HASH;\\r\\n    bytes32 public immutable ACCEPTED_HASH;\\r\\n    bytes32 public immutable REJECTED_HASH;\\r\\n\\r\\n    // mapping (address => EmployeePayload[]) public employees;\\r\\n    mapping (address => mapping (address => bool)) private isAdded;\\r\\n\\r\\n    mapping (address => PendingPayment) private pendingPayment;\\r\\n\\r\\n    EmployeePayload[] private employees;\\r\\n\\r\\n    modifier validateEmployeeId(uint employeeId, address employer) {\\r\\n        require(employeeId < employees.length, \\\"Invalid employeeId\\\");\\r\\n        require(employees[employeeId].employer == employer, \\\"Not an employer of employeeId\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (address _cUSD) {\\r\\n        if(_cUSD == address(0)) revert();\\r\\n        cUSD = _cUSD;\\r\\n        LOAN_HASH = _toHash(\\\"LOAN\\\");\\r\\n        ADVANCE_HASH = _toHash(\\\"ADVANCE\\\");\\r\\n        ACCEPTED_HASH = _toHash(\\\"ACCEPTED\\\");\\r\\n        REJECTED_HASH = _toHash(\\\"REJECTED\\\");\\r\\n    }\\r\\n\\r\\n    receive() external payable { revert(); }\\r\\n\\r\\n    function _toHash(string memory loanOrHashStr) internal pure returns(bytes32 _hash) {\\r\\n        return keccak256(abi.encode(loanOrHashStr));\\r\\n    }\\r\\n\\r\\n    function _sendPayment(address from, address to, uint amount) private {\\r\\n        if(!IERC20(cUSD).transferFrom(from, to, amount)) revert TransferFromFailed();\\r\\n    }\\r\\n\\r\\n    function _amortize(EmployeePayload memory pld) internal pure returns(uint payBalance, uint loanBal, bool isLoan, bool isAdvance) {\\r\\n        loanBal = pld.loanReq.amount;\\r\\n        if(loanBal > 0) {\\r\\n            isLoan = true;\\r\\n            pld.loanReq.amortizationAmt <= loanBal? \\r\\n                (loanBal -= pld.loanReq.amortizationAmt, payBalance = pld.pay - pld.loanReq.amortizationAmt) : \\r\\n                    (loanBal -= loanBal, payBalance = pld.pay - loanBal);\\r\\n        }\\r\\n\\r\\n        if(pld.advanceReq.amount > 0) {\\r\\n            isAdvance = true;\\r\\n            pld.advanceReq.amortizationAmt <= loanBal? \\r\\n                (loanBal -= pld.advanceReq.amortizationAmt, payBalance = pld.pay - pld.advanceReq.amortizationAmt) : \\r\\n                    (loanBal -= loanBal, payBalance = pld.pay - loanBal);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function addEmployee(address employee, uint256 payment, uint8 saveForMeRate) public returns(bool done) {\\r\\n        address sender = _msgSender();\\r\\n        require(employee != address(0), \\\"Addresses is empty\\\");\\r\\n        // require(employee != sender, \\\"Employer is the employer\\\");\\r\\n        if(!isAdded[sender][employee]) {\\r\\n            isAdded[sender][employee] = true;\\r\\n            employees.push(EmployeePayload( employee, sender, employees.length, true, false, payment, saveForMeRate, 0, AdvanceRequest(0, 0, AdvanceRequestStatus(0)), LoanRequest(0, 0, 0, LoanRequestStatus(0))));\\r\\n        } else {\\r\\n            revert(\\\"Employee exist\\\");\\r\\n        }\\r\\n        return done;\\r\\n    }\\r\\n\\r\\n    function disableOrEnableEmployee(uint employeeId, bool value) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, _msgSender()) \\r\\n        returns(bool) \\r\\n    {\\r\\n        EmployeePayload memory pld = employees[employeeId];\\r\\n        if(value) {\\r\\n            require(!pld.active, \\\"Enabled\\\");\\r\\n        } else {\\r\\n            require(pld.active, \\\"Disabled\\\");\\r\\n        }\\r\\n\\r\\n        employees[employeeId].active = value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function requestAdvanceOrLoan(address employerAddr, uint employeeId, uint24 amount, string memory loanOrAdvanceStr) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, employerAddr) \\r\\n        returns(bool) \\r\\n    {\\r\\n        EmployeePayload memory pld = employees[employeeId];\\r\\n        string memory errorMessage = \\\"You have pending request\\\";\\r\\n        bool condition;\\r\\n        uint amount_ = amount * (10 ** IERC20(cUSD).decimals());\\r\\n        if(_toHash(loanOrAdvanceStr) == ADVANCE_HASH) {\\r\\n            condition = pld.advanceReq.status == AdvanceRequestStatus.NONE || pld.advanceReq.status == AdvanceRequestStatus.SERVICED;\\r\\n            require(amount_ <= pld.pay, \\\"Advance cannot exceed Salary\\\");\\r\\n            employees[employeeId].advanceReq = AdvanceRequest(amount_, 0, AdvanceRequestStatus.PENDING);\\r\\n        } else if(_toHash(loanOrAdvanceStr) == LOAN_HASH) {\\r\\n            condition = pld.loanReq.status == LoanRequestStatus.NONE || pld.loanReq.status == LoanRequestStatus.SERVICED;\\r\\n            errorMessage = \\\"You have pending loan request\\\";\\r\\n            employees[employeeId].loanReq = LoanRequest(amount_, 0, 0, LoanRequestStatus.REQUESTED);\\r\\n        } else {\\r\\n            revert(loanOrAdvanceStr);\\r\\n        }\\r\\n        require(condition, errorMessage);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approveLoanOrAdvanceRequest(uint employeeId, uint8 interestRate, uint8 amortizationRate, string memory loanOrAdvanceStr) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, _msgSender()) \\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory pld = employees[employeeId];\\r\\n        require(pld.active, \\\"Disabled\\\");\\r\\n        uint allowance = IERC20(cUSD).allowance(sender, address(this));\\r\\n        uint interest = (allowance * interestRate) / 100;\\r\\n        uint amortizationAmt = ((allowance + interest) * amortizationRate) / 100;\\r\\n        require(amortizationAmt <= pld.pay, \\\"Amortization exceeds pay\\\");\\r\\n        if(_toHash(loanOrAdvanceStr) == ADVANCE_HASH) {\\r\\n            require(pld.advanceReq.status == AdvanceRequestStatus.PENDING, \\\"Invalid request\\\");\\r\\n            employees[employeeId].advanceReq = AdvanceRequest(allowance, amortizationAmt, AdvanceRequestStatus.DISBURSED);\\r\\n            _sendPayment(sender, pld.identifier, allowance);\\r\\n        } else if(_toHash(loanOrAdvanceStr) == LOAN_HASH) {\\r\\n            require(pld.loanReq.status == LoanRequestStatus.REQUESTED, \\\"Invalid request\\\");\\r\\n            employees[employeeId].loanReq = LoanRequest(\\r\\n                allowance + interest,\\r\\n                interest,\\r\\n                amortizationAmt,\\r\\n                LoanRequestStatus.RESPONDED\\r\\n            );\\r\\n        } else {\\r\\n            revert (loanOrAdvanceStr);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function acceptOrRejectLoanApproval(address employerAddr, uint employeeId, string memory acceptOrRejectStr) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, employerAddr)\\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory emp = employees[employeeId];\\r\\n        uint allowance = IERC20(cUSD).allowance(employerAddr, address(this));\\r\\n        require(sender == emp.identifier, \\\"UnAuthorized call\\\");\\r\\n        if(allowance > 0) {\\r\\n            if(_toHash(acceptOrRejectStr) == ACCEPTED_HASH) {\\r\\n                employees[employeeId].loanReq.status = LoanRequestStatus.ACCEPTED;\\r\\n                _sendPayment(employerAddr, emp.identifier, allowance);\\r\\n            } else if(_toHash(acceptOrRejectStr) == REJECTED_HASH) {\\r\\n                delete employees[employeeId].loanReq;\\r\\n            } else {\\r\\n                revert (acceptOrRejectStr);\\r\\n            }\\r\\n        } else {\\r\\n            delete employees[employeeId].loanReq;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function save4Me(address employerAddr, uint employeeId, bool value)\\r\\n        public\\r\\n        validateEmployeeId(employeeId, employerAddr) \\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory emp = employees[employeeId];\\r\\n        require(sender == emp.identifier, \\\"UnAuthorized call\\\");\\r\\n        employees[employeeId].saveForMe = value;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**@dev Employers pay employees\\r\\n     * Employees addition are not accepted at this point. \\r\\n     * Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid\\r\\n     * Note: pay() is atomic by context i.e transfer to all employees must pass simultaneously.\\r\\n     *      Employers should ensure enough allowance is given to cover the pays.\\r\\n     * \\r\\n     * Note: Employers can select the range of empployees to pay. This is done using the { start } and { stop } flags.\\r\\n     *       These flags neither can exceed the number of employees in storage nor can start eceeds stop.\\r\\n     * param employeeId : Id assigned to employee at registration point. It corresponds to their position in the EmployeePayload array.\\r\\n     * @param acceptSaveForMe : Employer should specify if they're willing to save for employees by holding their pay in custody until otherwise canceled by the employee. \\r\\n     *                          This attracts interests compounded on the principal pay. \\r\\n     * Note: Employer should give enough allowance correspond to cUSD balance to cover the expected payment range.\\r\\n     */\\r\\n       function sendPayment(bool acceptSaveForMe) \\r\\n        public \\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        PendingPayment memory ppy = pendingPayment[sender];\\r\\n        require(block.timestamp <= (ppy.callTime + 30 seconds), \\\"Execution expire\\\");\\r\\n        (uint pay, uint loanBal, bool isLoan, bool isAdvance) = _amortize(ppy.payload);\\r\\n        if(isLoan) {\\r\\n            employees[ppy.payload.workId].loanReq.amount = loanBal;\\r\\n            if(loanBal == 0) {\\r\\n                employees[ppy.payload.workId].loanReq.status = LoanRequestStatus.SERVICED;\\r\\n            }\\r\\n        }  \\r\\n        if(isAdvance) {\\r\\n            employees[ppy.payload.workId].advanceReq.amount = loanBal;\\r\\n            if(loanBal == 0) {\\r\\n                employees[ppy.payload.workId].advanceReq.status = AdvanceRequestStatus.SERVICED;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint newBal = IERC20(cUSD).balanceOf(ppy.payload.identifier);\\r\\n        require(newBal >= (ppy.snapshotBal + pay), \\\"Balance anomally\\\");\\r\\n        // if(!ppy.payload.saveForMe) {\\r\\n        //     _sendPayment(sender, ppy.payload.identifier, pay);\\r\\n        // }\\r\\n        if(ppy.payload.saveForMe && acceptSaveForMe) {\\r\\n            employees[ppy.payload.workId].pay = (pay + ((pay * ppy.payload.saveForMeRate) / 100));\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n\\r\\n\\r\\n        // \\r\\n        // if(loanBal == 0) {\\r\\n        //     ;\\r\\n        // }\\r\\n        // \\r\\n        \\r\\n    }\\r\\n\\r\\n    function retrievEmployeePayment(uint employeeId) \\r\\n        public \\r\\n        view\\r\\n        validateEmployeeId(employeeId, _msgSender()) \\r\\n        returns(uint payBalance, uint loanBal, bool isLoan, bool isAdvance)\\r\\n    {\\r\\n        return _amortize(employees[employeeId]);\\r\\n    }\\r\\n\\r\\n    function preparePayment(uint employeeId) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, _msgSender())\\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory pld = employees[employeeId];\\r\\n        pendingPayment[sender] = PendingPayment(pld, IERC20(cUSD).balanceOf(pld.identifier), uint64(block.timestamp));\\r\\n        // uint allowance = msg.value;\\r\\n        // require(allowance >= pay, \\\"Not enough balance\\\");\\r\\n        // uint pay = _amortize(employeeId, pld);\\r\\n        // if(!pld.saveForMe) {\\r\\n        //     _sendPayment(sender, pld.identifier, pay);\\r\\n        // }\\r\\n        // if(pld.saveForMe && acceptSaveForMe) {\\r\\n        //     employees[employeeId].pay = (pay + ((pay * pld.saveForMeRate) / 100));\\r\\n        // }\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getEmployees() public view returns(EmployeePayload[] memory _returnData) {\\r\\n        _returnData = employees;\\r\\n        return _returnData;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n// function sendPayment(uint employeeId, bool acceptSaveForMe) \\r\\n//         public \\r\\n//         validateEmployeeId(employeeId, _msgSender())\\r\\n//         returns(bool) \\r\\n//     {\\r\\n//         address sender = _msgSender();\\r\\n//         EmployeePayload memory pld = employees[employeeId];\\r\\n//         uint allowance = IERC20(cUSD).allowance(sender, address(this));\\r\\n//         uint pay = _amortize(employeeId, pld);\\r\\n//         require(allowance >= pay, \\\"Not enough balance\\\");\\r\\n//         if(!pld.saveForMe) {\\r\\n//             _sendPayment(sender, pld.identifier, pay);\\r\\n//         }\\r\\n//         if(pld.saveForMe && acceptSaveForMe) {\\r\\n//             employees[employeeId].pay = (pay + ((pay * pld.saveForMeRate) / 100));\\r\\n//         }\\r\\n        \\r\\n//         return true;\\r\\n//     }\",\"keccak256\":\"0xc29994ffd06823b265f50203b8af90f13f99ea92a3e39eac625c22532afe1acd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b506040516200352d3803806200352d8339810160408190526200003591620001bc565b600160a060020a0381166200004957600080fd5b600160a060020a03811660805260408051808201909152600481527f4c4f414e0000000000000000000000000000000000000000000000000000000060208201526200009e906401000000006200018a810204565b60a05260408051808201909152600781527f414456414e4345000000000000000000000000000000000000000000000000006020820152620000e9906401000000006200018a810204565b60c05260408051808201909152600881527f4143434550544544000000000000000000000000000000000000000000000000602082015262000134906401000000006200018a810204565b60e05260408051808201909152600881527f52454a454354454400000000000000000000000000000000000000000000000060208201526200017f906401000000006200018a810204565b61010052506200023e565b6000816040516020016200019f9190620001ee565b604051602081830303815290604052805190602001209050919050565b600060208284031215620001cf57600080fd5b8151600160a060020a0381168114620001e757600080fd5b9392505050565b600060208083528351808285015260005b818110156200021d57858101830151858201604001528201620001ff565b506000604082860101526040601f19601f8301168501019250505092915050565b60805160a05160c05160e05161010051613256620002d7600039600081816102af0152611d440152600081816103570152611cba0152600081816101ed015281816116bd01526121b60152600081816103230152818161181301526122ea01526000818161012a0152818161072d01528181610ab00152818161160301528181611bdd015281816120a90152612a9b01526132566000f3fe608060405260043610610109576000357c01000000000000000000000000000000000000000000000000000000009004806380c231eb116100a7578063b2bf0bab11610076578063b2bf0bab146102f1578063c5a5955e14610311578063ddfa432414610345578063f6addfc21461037957600080fd5b806380c231eb1461025d57806381a094161461027d578063883281c41461029d57806393e5cb4e146102d157600080fd5b80634abefa36116100e35780634abefa36146101b95780635fdc32d1146101db57806371a0a6fb1461021d578063759fe1691461023d57600080fd5b80631fccf672146101185780633ddfb8eb1461016957806348cacdbc1461019957600080fd5b3661011357600080fd5b600080fd5b34801561012457600080fd5b5061014c7f000000000000000000000000000000000000000000000000000000000000000081565b604051600160a060020a0390911681526020015b60405180910390f35b34801561017557600080fd5b50610189610184366004612b54565b6103c1565b6040519015158152602001610160565b3480156101a557600080fd5b506101896101b4366004612b78565b61087a565b3480156101c557600080fd5b506101ce610cc3565b6040516101609190612c10565b3480156101e757600080fd5b5061020f7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610160565b34801561022957600080fd5b50610189610238366004612cfe565b610e52565b34801561024957600080fd5b50610189610258366004612d4d565b6110e9565b34801561026957600080fd5b50610189610278366004612e28565b6113db565b34801561028957600080fd5b50610189610298366004612e9a565b6119af565b3480156102a957600080fd5b5061020f7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102dd57600080fd5b506101896102ec366004612ef1565b611e2a565b3480156102fd57600080fd5b5061018961030c366004612f29565b612449565b34801561031d57600080fd5b5061020f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561035157600080fd5b5061020f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561038557600080fd5b50610399610394366004612b78565b612723565b6040805194855260208501939093529015159183019190915215156060820152608001610160565b33600081815260016020818152604080842081516101a0810183528154600160a060020a039081166060808401918252968401549091166080830152600283015460a083015260038084015460ff808216151560c0860152610100918290048116151560e0860152600486015482860152600586015480821661012087015291909104811661014085015285519788018652600685018054895260078601549789019790975260088501549899988a98949795968896949588956101608901959194909392850192169081111561049a5761049a612b91565b60038111156104ab576104ab612b91565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600481111561050557610505612b91565b600481111561051657610516612b91565b9052509052508152600d8201546020820152600e9091015467ffffffffffffffff1660409182015281015190915061054f90601e612f72565b67ffffffffffffffff164211156105b05760405160e560020a62461bcd02815260206004820152601060248201527f457865637574696f6e206578706972650000000000000000000000000000000060448201526064015b60405180910390fd5b6000806000806105c38560000151612920565b9350935093509350811561065d57826002866000015160400151815481106105ed576105ed612f9a565b90600052602060002090600d0201600901600001819055508260000361065d57600460028660000151604001518154811061062a5761062a612f9a565b60009182526020909120600c600d9092020101805460ff1916600183600481111561065757610657612b91565b02179055505b80156106ef578260028660000151604001518154811061067f5761067f612f9a565b90600052602060002090600d020160060160000181905550826000036106ef5760036002866000015160400151815481106106bc576106bc612f9a565b600091825260209091206008600d9092020101805460ff191660018360038111156106e9576106e9612b91565b02179055505b8451516040517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a0391821660048201526000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107989190612fb3565b90508486602001516107aa9190612fcc565b8110156107fc5760405160e560020a62461bcd02815260206004820152601060248201527f42616c616e636520616e6f6d616c6c790000000000000000000000000000000060448201526064016105a7565b855160800151801561080b5750885b1561086b57855160c001516064906108269060ff1687612fe5565b6108309190612ffc565b61083a9086612fcc565b60028760000151604001518154811061085557610855612f9a565b90600052602060002090600d0201600401819055505b50600198975050505050505050565b6000813360025482106108a25760405160e560020a62461bcd0281526004016105a790613021565b80600160a060020a0316600283815481106108bf576108bf612f9a565b600091825260209091206001600d909202010154600160a060020a0316146108fc5760405160e560020a62461bcd0281526004016105a790613058565b600033905060006002868154811061091657610916612f9a565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e08801528551908101865260068501805482526007860154988201989098526008850154969794969288019590949390850192909116908111156109df576109df612b91565b60038111156109f0576109f0612b91565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115610a4a57610a4a612b91565b6004811115610a5b57610a5b612b91565b90525090525060408051606081018252828152825191517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201529293509160208301917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1b9190612fb3565b81524267ffffffffffffffff16602091820152600160a060020a038481166000908152600180845260409182902085518051825473ffffffffffffffffffffffffffffffffffffffff19908116918716919091178355818701518385018054909216961695909517909455838301516002820155606084015160038083018054608088015161ffff1991821694151561ff0019169490941761010094151585021790915560a0870151600485015560c087015160058501805460e08a015160ff93841691909416179190921684021790559085015180516006840190815596810151600784015593840151600883018054939788969590949293919260ff1916918490811115610c2d57610c2d612b91565b021790555050506101208201518051600983019081556020820151600a8401556040820151600b8401556060820151600c8401805460ff19166001836004811115610c7a57610c7a612b91565b02179055505050506020830151600d83015550604090910151600e909101805467ffffffffffffffff191667ffffffffffffffff90921691909117905550600195945050505050565b60606002805480602002602001604051908101604052809291908181526020016000905b82821015610e495760008481526020908190206040805161014081018252600d86029092018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e0880152855190810186526006850180548252600786015498820198909852600885015496979496928801959094939085019290911690811115610db757610db7612b91565b6003811115610dc857610dc8612b91565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115610e2257610e22612b91565b6004811115610e3357610e33612b91565b9052509052508152600190910190602001610ce7565b50505050905090565b600082846002805490508210610e7d5760405160e560020a62461bcd0281526004016105a790613021565b80600160a060020a031660028381548110610e9a57610e9a612f9a565b600091825260209091206001600d909202010154600160a060020a031614610ed75760405160e560020a62461bcd0281526004016105a790613058565b6000339050600060028781548110610ef157610ef1612f9a565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e0880152855190810186526006850180548252600786015498820198909852600885015496979496928801959094939085019290911690811115610fba57610fba612b91565b6003811115610fcb57610fcb612b91565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600481111561102557611025612b91565b600481111561103657611036612b91565b9052509052508051909150600160a060020a0383811691161461109e5760405160e560020a62461bcd02815260206004820152601160248201527f556e417574686f72697a65642063616c6c00000000000000000000000000000060448201526064016105a7565b85600288815481106110b2576110b2612f9a565b90600052602060002090600d020160030160016101000a81548160ff02191690831515021790555060019450505050509392505050565b600033600160a060020a0385166111455760405160e560020a62461bcd02815260206004820152601260248201527f41646472657373657320697320656d707479000000000000000000000000000060448201526064016105a7565b600160a060020a038082166000908152602081815260408083209389168352929052205460ff1661138857600160a060020a03818116600081815260208181526040808320948a16808452948252808320805460ff19166001908117909155815161014081018352958652858301949094526002805486830152606080870195909552608080870185905260a087018b905260ff8a1660c088015260e087018590528251808701845285815280850186905280840186905261010088015282519081018352848152928301849052908201839052939261012084019290820152905281546001808201845560009384526020938490208351600d90930201805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a039485161782558486015182840180549092169416939093179092556040808401516002840155606084015160038085018054608088015161ffff1991821694151561ff0019169490941761010094151585021790915560a0870151600487015560c087015160058701805460e08a015160ff93841691909416179190921684021790559085015180516006860190815596810151600786015591820151600885018054969795969395949193909260ff199091169190849081111561132d5761132d612b91565b021790555050506101208201518051600983019081556020820151600a8401556040820151600b8401556060820151600c8401805460ff1916600183600481111561137a5761137a612b91565b0217905550505050506113d3565b60405160e560020a62461bcd02815260206004820152600e60248201527f456d706c6f79656520657869737400000000000000000000000000000000000060448201526064016105a7565b509392505050565b6000838560028054905082106114065760405160e560020a62461bcd0281526004016105a790613021565b80600160a060020a03166002838154811061142357611423612f9a565b600091825260209091206001600d909202010154600160a060020a0316146114605760405160e560020a62461bcd0281526004016105a790613058565b60006002878154811061147557611475612f9a565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e088015285519081018652600685018054825260078601549882019890985260088501549697949692880195909493908501929091169081111561153e5761153e612b91565b600381111561154f5761154f612b91565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660048111156115a9576115a9612b91565b60048111156115ba576115ba612b91565b8152505081525050905060006040518060400160405280601881526020017f596f7520686176652070656e64696e672072657175657374000000000000000081525090506000807f0000000000000000000000000000000000000000000000000000000000000000600160a060020a031663313ce5676040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381865afa15801561167b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169f919061308f565b6116aa90600a613193565b6116b99062ffffff8b16612fe5565b90507f00000000000000000000000000000000000000000000000000000000000000006116e589612a24565b0361181157600084610100015160400151600381111561170757611707612b91565b148061172d5750600384610100015160400151600381111561172b5761172b612b91565b145b91508360a001518111156117865760405160e560020a62461bcd02815260206004820152601c60248201527f416476616e63652063616e6e6f74206578636565642053616c6172790000000060448201526064016105a7565b6040805160608101825282815260006020820152908101600181525060028b815481106117b5576117b5612f9a565b90600052602060002090600d0201600601600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083600381111561180457611804612b91565b021790555090505061197b565b7f000000000000000000000000000000000000000000000000000000000000000061183b89612a24565b0361195e57600084610120015160600151600481111561185d5761185d612b91565b14806118835750600484610120015160600151600481111561188157611881612b91565b145b91506040518060400160405280601d81526020017f596f7520686176652070656e64696e67206c6f616e2072657175657374000000815250925060405180608001604052808281526020016000815260200160008152602001600160048111156118ef576118ef612b91565b81525060028b8154811061190557611905612f9a565b90600052602060002090600d020160090160008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff0219169083600481111561180457611804612b91565b8760405160e560020a62461bcd0281526004016105a791906131a2565b828261199d5760405160e560020a62461bcd0281526004016105a791906131a2565b5060019b9a5050505050505050505050565b6000828460028054905082106119da5760405160e560020a62461bcd0281526004016105a790613021565b80600160a060020a0316600283815481106119f7576119f7612f9a565b600091825260209091206001600d909202010154600160a060020a031614611a345760405160e560020a62461bcd0281526004016105a790613058565b6000339050600060028781548110611a4e57611a4e612f9a565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e0880152855190810186526006850180548252600786015498820198909852600885015496979496928801959094939085019290911690811115611b1757611b17612b91565b6003811115611b2857611b28612b91565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115611b8257611b82612b91565b6004811115611b9357611b93612b91565b9052509052506040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a038a811660048301523060248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e90604401602060405180830381865afa158015611c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c489190612fb3565b90508160000151600160a060020a031683600160a060020a031614611cb25760405160e560020a62461bcd02815260206004820152601160248201527f556e417574686f72697a65642063616c6c00000000000000000000000000000060448201526064016105a7565b8015611dd7577f0000000000000000000000000000000000000000000000000000000000000000611ce288612a24565b03611d4257600360028981548110611cfc57611cfc612f9a565b60009182526020909120600c600d9092020101805460ff19166001836004811115611d2957611d29612b91565b0217905550611d3d89836000015183612a54565b61086b565b7f0000000000000000000000000000000000000000000000000000000000000000611d6c88612a24565b03611dba5760028881548110611d8457611d84612f9a565b6000918252602082206009600d90920201908101829055600a8101829055600b810191909155600c01805460ff1916905561086b565b8660405160e560020a62461bcd0281526004016105a791906131a2565b60028881548110611dea57611dea612f9a565b6000918252602082206009600d90920201908101829055600a8101829055600b810191909155600c01805460ff1916905550600198975050505050505050565b600084336002548210611e525760405160e560020a62461bcd0281526004016105a790613021565b80600160a060020a031660028381548110611e6f57611e6f612f9a565b600091825260209091206001600d909202010154600160a060020a031614611eac5760405160e560020a62461bcd0281526004016105a790613058565b6000339050600060028981548110611ec657611ec6612f9a565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e0880152855190810186526006850180548252600786015498820198909852600885015496979496928801959094939085019290911690811115611f8f57611f8f612b91565b6003811115611fa057611fa0612b91565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115611ffa57611ffa612b91565b600481111561200b5761200b612b91565b90525090525060608101519091506120685760405160e560020a62461bcd02815260206004820152600860248201527f44697361626c656400000000000000000000000000000000000000000000000060448201526064016105a7565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a0383811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e90604401602060405180830381865afa1580156120f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121169190612fb3565b90506000606461212960ff8c1684612fe5565b6121339190612ffc565b90506000606460ff8b166121478486612fcc565b6121519190612fe5565b61215b9190612ffc565b90508360a001518111156121b45760405160e560020a62461bcd02815260206004820152601860248201527f416d6f7274697a6174696f6e206578636565647320706179000000000000000060448201526064016105a7565b7f00000000000000000000000000000000000000000000000000000000000000006121de8a612a24565b036122e857600184610100015160400151600381111561220057612200612b91565b146122505760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c69642072657175657374000000000000000000000000000000000060448201526064016105a7565b6040805160608101825284815260208101839052908101600281525060028d8154811061227f5761227f612f9a565b90600052602060002090600d0201600601600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360038111156122ce576122ce612b91565b02179055505084516122e39150869085612a54565b61199d565b7f00000000000000000000000000000000000000000000000000000000000000006123128a612a24565b0361242c57600184610120015160600151600481111561233457612334612b91565b146123845760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c69642072657175657374000000000000000000000000000000000060448201526064016105a7565b6040518060800160405280838561239b9190612fcc565b81526020810184905260408101839052606001600281525060028d815481106123c6576123c6612f9a565b90600052602060002090600d020160090160008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff0219169083600481111561241f5761241f612b91565b021790555090505061199d565b8860405160e560020a62461bcd0281526004016105a791906131a2565b6000823360025482106124715760405160e560020a62461bcd0281526004016105a790613021565b80600160a060020a03166002838154811061248e5761248e612f9a565b600091825260209091206001600d909202010154600160a060020a0316146124cb5760405160e560020a62461bcd0281526004016105a790613058565b6000600286815481106124e0576124e0612f9a565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e08801528551908101865260068501805482526007860154988201989098526008850154969794969288019590949390850192909116908111156125a9576125a9612b91565b60038111156125ba576125ba612b91565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600481111561261457612614612b91565b600481111561262557612625612b91565b9052509052509050841561268d578060600151156126885760405160e560020a62461bcd02815260206004820152600760248201527f456e61626c65640000000000000000000000000000000000000000000000000060448201526064016105a7565b6126e1565b80606001516126e15760405160e560020a62461bcd02815260206004820152600860248201527f44697361626c656400000000000000000000000000000000000000000000000060448201526064016105a7565b84600287815481106126f5576126f5612f9a565b60009182526020909120600d90910201600301805460ff191691151591909117905550600195945050505050565b60008080808433600254821061274e5760405160e560020a62461bcd0281526004016105a790613021565b80600160a060020a03166002838154811061276b5761276b612f9a565b600091825260209091206001600d909202010154600160a060020a0316146127a85760405160e560020a62461bcd0281526004016105a790613058565b61290e600288815481106127be576127be612f9a565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e088015285519081018652600685018054825260078601549882019890985260088501549697949692880195909493908501929091169081111561288757612887612b91565b600381111561289857612898612b91565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660048111156128f2576128f2612b91565b600481111561290357612903612b91565b905250905250612920565b95509550955095505b50509193509193565b61012081015151600090818082156129a357600191508285610120015160400151111561296c5761295183806131f0565b925082838660a0015161296491906131f0565b9450846129a0565b6101208501516040015161298090846131f0565b925082856101200151604001518660a0015161299c91906131f0565b9450845b50505b6101008501515115612a1d5760019050828561010001516020015111156129e9576129ce83806131f0565b925082838660a001516129e191906131f0565b945084612917565b610100850151602001516129fd90846131f0565b925082856101000151602001518660a00151612a1991906131f0565b9450505b9193509193565b600081604051602001612a3791906131a2565b604051602081830303815290604052805190602001209050919050565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301528381166024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af1158015612ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b089190613203565b612b3e576040517f7939f42400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b8015158114612b5157600080fd5b50565b600060208284031215612b6657600080fd5b8135612b7181612b43565b9392505050565b600060208284031215612b8a57600080fd5b5035919050565b60e060020a634e487b7102600052602160045260246000fd5b8051825260208101516020830152604081015160048110612bcd57612bcd612b91565b806040840152505050565b805182526020810151602083015260408101516040830152606081015160058110612c0557612c05612b91565b806060840152505050565b602080825282518282018190526000919060409081850190868401855b82811015612cd55781518051600160a060020a039081168652878201511687860152858101518686015260608082015115159086015260808082015115159086015260a0808201519086015260c08082015160ff9081169187019190915260e0808301519091169086015261010080820151612cab82880182612baa565b50506101200151612cc0610160860182612bd8565b506101e0939093019290850190600101612c2d565b5091979650505050505050565b8035600160a060020a0381168114612cf957600080fd5b919050565b600080600060608486031215612d1357600080fd5b612d1c84612ce2565b9250602084013591506040840135612d3381612b43565b809150509250925092565b60ff81168114612b5157600080fd5b600080600060608486031215612d6257600080fd5b612d6b84612ce2565b9250602084013591506040840135612d3381612d3e565b60e060020a634e487b7102600052604160045260246000fd5b600082601f830112612dac57600080fd5b813567ffffffffffffffff80821115612dc757612dc7612d82565b604051601f8301601f19908116603f01168101908282118183101715612def57612def612d82565b81604052838152866020858801011115612e0857600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215612e3e57600080fd5b612e4785612ce2565b935060208501359250604085013562ffffff81168114612e6657600080fd5b9150606085013567ffffffffffffffff811115612e8257600080fd5b612e8e87828801612d9b565b91505092959194509250565b600080600060608486031215612eaf57600080fd5b612eb884612ce2565b925060208401359150604084013567ffffffffffffffff811115612edb57600080fd5b612ee786828701612d9b565b9150509250925092565b60008060008060808587031215612f0757600080fd5b843593506020850135612f1981612d3e565b92506040850135612e6681612d3e565b60008060408385031215612f3c57600080fd5b823591506020830135612f4e81612b43565b809150509250929050565b60e060020a634e487b7102600052601160045260246000fd5b67ffffffffffffffff818116838216019080821115612f9357612f93612f59565b5092915050565b60e060020a634e487b7102600052603260045260246000fd5b600060208284031215612fc557600080fd5b5051919050565b80820180821115612fdf57612fdf612f59565b92915050565b8082028115828204841417612fdf57612fdf612f59565b60008261301c5760e060020a634e487b7102600052601260045260246000fd5b500490565b60208082526012908201527f496e76616c696420656d706c6f79656549640000000000000000000000000000604082015260600190565b6020808252601d908201527f4e6f7420616e20656d706c6f796572206f6620656d706c6f7965654964000000604082015260600190565b6000602082840312156130a157600080fd5b8151612b7181612d3e565b600181815b808511156130e95781600019048211156130cd576130cd612f59565b808516156130da57918102915b600290940493908002906130b1565b509250929050565b60008261310057506001612fdf565b8161310d57506000612fdf565b8160018114613123576002811461312d5761314a565b6001915050612fdf565b60ff84111561313e5761313e612f59565b8360020a915050612fdf565b5060208310610133831016604e8410600b841016171561316d575081810a612fdf565b61317783836130ac565b806000190482111561318b5761318b612f59565b029392505050565b6000612b7160ff8416836130f1565b600060208083528351808285015260005b818110156131cf578581018301518582016040015282016131b3565b506000604082860101526040601f19601f8301168501019250505092915050565b81810381811115612fdf57612fdf612f59565b60006020828403121561321557600080fd5b8151612b7181612b4356fea2646970667358221220418a75b8ae898aa1282bf8fdabf46109c194c1af559e609cd24f4e5e3e037df264736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "sendPayment(bool)": {
        "details": "Employers pay employees Employees addition are not accepted at this point.  Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid Note: pay() is atomic by context i.e transfer to all employees must pass simultaneously.      Employers should ensure enough allowance is given to cover the pays.  Note: Employers can select the range of empployees to pay. This is done using the { start } and { stop } flags.       These flags neither can exceed the number of employees in storage nor can start eceeds stop. param employeeId : Id assigned to employee at registration point. It corresponds to their position in the EmployeePayload array.",
        "params": {
          "acceptSaveForMe": ": Employer should specify if they're willing to save for employees by holding their pay in custody until otherwise canceled by the employee.                           This attracts interests compounded on the principal pay.  Note: Employer should give enough allowance correspond to cUSD balance to cover the expected payment range."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 248,
        "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
        "label": "isAdded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 253,
        "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
        "label": "pendingPayment",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(PendingPayment)93_storage)"
      },
      {
        "astId": 257,
        "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
        "label": "employees",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(EmployeePayload)67_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(EmployeePayload)67_storage)dyn_storage": {
        "base": "t_struct(EmployeePayload)67_storage",
        "encoding": "dynamic_array",
        "label": "struct ILoanAndSalaryAdvance.EmployeePayload[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(AdvanceRequestStatus)38": {
        "encoding": "inplace",
        "label": "enum ILoanAndSalaryAdvance.AdvanceRequestStatus",
        "numberOfBytes": "1"
      },
      "t_enum(LoanRequestStatus)44": {
        "encoding": "inplace",
        "label": "enum ILoanAndSalaryAdvance.LoanRequestStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(PendingPayment)93_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ILoanAndSalaryAdvance.PendingPayment)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingPayment)93_storage"
      },
      "t_struct(AdvanceRequest)75_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.AdvanceRequest",
        "members": [
          {
            "astId": 69,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 71,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amortizationAmt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 74,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(AdvanceRequestStatus)38"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(EmployeePayload)67_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.EmployeePayload",
        "members": [
          {
            "astId": 46,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "identifier",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 48,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "employer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 50,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "workId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 52,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 54,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "saveForMe",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 56,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "pay",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 58,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "saveForMeRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 60,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amortizationRate",
            "offset": 1,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 63,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "advanceReq",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(AdvanceRequest)75_storage"
          },
          {
            "astId": 66,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "loanReq",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(LoanRequest)85_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(LoanRequest)85_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.LoanRequest",
        "members": [
          {
            "astId": 77,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 79,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "interest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 81,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amortizationAmt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 84,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(LoanRequestStatus)44"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PendingPayment)93_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.PendingPayment",
        "members": [
          {
            "astId": 88,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "payload",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(EmployeePayload)67_storage"
          },
          {
            "astId": 90,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "snapshotBal",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 92,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "callTime",
            "offset": 0,
            "slot": "14",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}