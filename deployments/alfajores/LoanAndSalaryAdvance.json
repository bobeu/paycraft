{
  "address": "0x6C591f4a86730902860ad4295addf3e41100Fa3D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cUSD",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "TransferFromFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACCEPTED_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADVANCE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOAN_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REJECTED_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "saveForMeRate",
          "type": "uint8"
        }
      ],
      "name": "addEmployee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "interestRate",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "amortizationRate",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "acceptOrRejectStr",
          "type": "string"
        }
      ],
      "name": "approveLoanOrAdvanceRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cUSD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "confirmPayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "disableOrEnableEmployee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmployees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "identifier",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "employer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "workId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "saveForMe",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "pay",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "saveForMeRate",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "amortizationRate",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amortizationAmt",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ILoanAndSalaryAdvance.LoanStatus",
                  "name": "status",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ILoanAndSalaryAdvance.AdvanceRequest",
              "name": "advanceReq",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "interest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amortizationAmt",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ILoanAndSalaryAdvance.LoanStatus",
                  "name": "status",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ILoanAndSalaryAdvance.LoanRequest",
              "name": "loanReq",
              "type": "tuple"
            }
          ],
          "internalType": "struct ILoanAndSalaryAdvance.EmployeePayload[]",
          "name": "_returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "txType",
          "type": "uint8"
        }
      ],
      "name": "preparePaymentRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "amount",
          "type": "uint24"
        },
        {
          "internalType": "string",
          "name": "loanOrAdvanceStr",
          "type": "string"
        }
      ],
      "name": "requestAdvanceOrLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "save4Me",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4ba5ddd8ea07aeb9bfc993244fc7008edad6f1ee031915452ce9d0333ea330d1",
  "receipt": {
    "to": null,
    "from": "0x7624269a420c12395B743aCF327A61f91bd23b84",
    "contractAddress": "0x6C591f4a86730902860ad4295addf3e41100Fa3D",
    "transactionIndex": 0,
    "gasUsed": "2505121",
    "logsBloom": "0x
    "blockHash": "0xe838d541dc1cefe9e1280ab6b7b3c30ed01eac99ae26470d617436d9c093ca78",
    "transactionHash": "0x4ba5ddd8ea07aeb9bfc993244fc7008edad6f1ee031915452ce9d0333ea330d1",
    "logs": [],
    "blockNumber": 23693131,
    "cumulativeGasUsed": "2505121",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1"
  ],
  "numDeployments": 4,
  "solcInputHash": "8e9fd8818f32437cd1446101a529b3aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cUSD\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TransferFromFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACCEPTED_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADVANCE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REJECTED_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"saveForMeRate\",\"type\":\"uint8\"}],\"name\":\"addEmployee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"interestRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amortizationRate\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"acceptOrRejectStr\",\"type\":\"string\"}],\"name\":\"approveLoanOrAdvanceRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"disableOrEnableEmployee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmployees\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"employer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"workId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"saveForMe\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pay\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"saveForMeRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amortizationRate\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amortizationAmt\",\"type\":\"uint256\"},{\"internalType\":\"enum ILoanAndSalaryAdvance.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.AdvanceRequest\",\"name\":\"advanceReq\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amortizationAmt\",\"type\":\"uint256\"},{\"internalType\":\"enum ILoanAndSalaryAdvance.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.LoanRequest\",\"name\":\"loanReq\",\"type\":\"tuple\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.EmployeePayload[]\",\"name\":\"_returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"preparePaymentRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"amount\",\"type\":\"uint24\"},{\"internalType\":\"string\",\"name\":\"loanOrAdvanceStr\",\"type\":\"string\"}],\"name\":\"requestAdvanceOrLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"save4Me\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"confirmPayment()\":{\"details\":\"Employers pay employees Employees addition are not accepted at this point.  Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid  Note: Employer should send an ammount correspond to cUSD balance to cover the expected payment range.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol\":\"LoanAndSalaryAdvance\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/loanAndSalaryAdvance/ILoanAndSalaryAdvance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface ILoanAndSalaryAdvance {\\r\\n    error TransferFromFailed();\\r\\n    enum TxType {NONE, LOAN, SALARYPAY}\\r\\n    enum LoanStatus {NONE, REQUESTED, DISBURSED, SERVICED}\\r\\n    struct EmployeePayload {\\r\\n        address identifier;\\r\\n        address employer;\\r\\n        uint workId;\\r\\n        bool active;\\r\\n        bool saveForMe;\\r\\n        uint pay;\\r\\n        uint8 saveForMeRate;\\r\\n        uint8 amortizationRate;\\r\\n        AdvanceRequest advanceReq;\\r\\n        LoanRequest loanReq;\\r\\n    }\\r\\n\\r\\n    struct AdvanceRequest {\\r\\n        uint amount;\\r\\n        uint amortizationAmt;\\r\\n        LoanStatus status;\\r\\n    }\\r\\n\\r\\n    struct LoanRequest {\\r\\n        uint amount;\\r\\n        uint interest;\\r\\n        uint amortizationAmt;\\r\\n        LoanStatus status;\\r\\n    }\\r\\n\\r\\n    struct PendingPayment {\\r\\n        EmployeePayload payload;\\r\\n        TxType txType;\\r\\n        uint snapshotBal;\\r\\n        uint64 callTime;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xee0015b8c0d8d67f4b0cdcdd3a3fd6d44b83b6a0fa45dddfb348eab84bee5ce5\",\"license\":\"MIT\"},\"contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\n\\r\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport { ILoanAndSalaryAdvance } from \\\"./ILoanAndSalaryAdvance.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns(uint8);\\r\\n    function balanceOf(address _of) external view returns(uint256);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ncontract LoanAndSalaryAdvance is Context, ILoanAndSalaryAdvance {\\r\\n    address public immutable cUSD;\\r\\n    bytes32 public immutable LOAN_HASH;\\r\\n    bytes32 public immutable ADVANCE_HASH;\\r\\n    bytes32 public immutable ACCEPTED_HASH;\\r\\n    bytes32 public immutable REJECTED_HASH;\\r\\n\\r\\n    // mapping (address => EmployeePayload[]) public employees;\\r\\n    mapping (address => mapping (address => bool)) private isAdded;\\r\\n\\r\\n    mapping (address => PendingPayment) private pendingPayments;\\r\\n\\r\\n    EmployeePayload[] private employees;\\r\\n\\r\\n    modifier validateEmployeeId(uint employeeId, address employer) {\\r\\n        require(employeeId < employees.length, \\\"Invalid employeeId\\\");\\r\\n        require(employees[employeeId].employer == employer, \\\"Not an employer of employeeId\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (address _cUSD) {\\r\\n        if(_cUSD == address(0)) revert();\\r\\n        cUSD = _cUSD;\\r\\n        LOAN_HASH = _toHash(\\\"LOAN\\\");\\r\\n        ADVANCE_HASH = _toHash(\\\"ADVANCE\\\");\\r\\n        ACCEPTED_HASH = _toHash(\\\"ACCEPTED\\\");\\r\\n        REJECTED_HASH = _toHash(\\\"REJECTED\\\");\\r\\n    }\\r\\n\\r\\n    receive() external payable { revert(); }\\r\\n\\r\\n    function _toHash(string memory loanOrHashStr) internal pure returns(bytes32 _hash) {\\r\\n        return keccak256(abi.encode(loanOrHashStr));\\r\\n    }\\r\\n\\r\\n    function _sendPayment(address from, address to, uint amount) private {\\r\\n        if(!IERC20(cUSD).transferFrom(from, to, amount)) revert TransferFromFailed();\\r\\n    }\\r\\n\\r\\n    function _amortize(uint employeeId, EmployeePayload memory pld) internal returns(uint payBalance) {\\r\\n        uint loanBal = pld.loanReq.amount;\\r\\n        if(loanBal > 0) {\\r\\n            pld.loanReq.amortizationAmt <= loanBal? \\r\\n                (loanBal -= pld.loanReq.amortizationAmt, payBalance = pld.pay - pld.loanReq.amortizationAmt) : \\r\\n                    (loanBal -= loanBal, payBalance = pld.pay - loanBal);\\r\\n            employees[employeeId].loanReq.amount = loanBal;\\r\\n            if(loanBal == 0) {\\r\\n                employees[employeeId].loanReq.status = LoanStatus.SERVICED;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        loanBal = pld.advanceReq.amount;\\r\\n        if(loanBal > 0) {\\r\\n            pld.advanceReq.amortizationAmt <= loanBal? \\r\\n                (loanBal -= pld.advanceReq.amortizationAmt, payBalance = pld.pay - pld.advanceReq.amortizationAmt) : \\r\\n                    (loanBal -= loanBal, payBalance = pld.pay - loanBal);\\r\\n            employees[employeeId].advanceReq.amount = loanBal;\\r\\n            if(loanBal == 0) {\\r\\n                employees[employeeId].advanceReq.status = LoanStatus.SERVICED;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function addEmployee(address employee, uint256 payment, uint8 saveForMeRate) public returns(bool done) {\\r\\n        address sender = _msgSender();\\r\\n        require(employee != address(0), \\\"Addresses is empty\\\");\\r\\n        // require(employee != sender, \\\"Employer is the employer\\\");\\r\\n        if(!isAdded[sender][employee]) {\\r\\n            isAdded[sender][employee] = true;\\r\\n            employees.push(EmployeePayload(employee, sender, employees.length, true, false, payment, saveForMeRate, 0, AdvanceRequest(0, 0, LoanStatus(0)), LoanRequest(0, 0, 0, LoanStatus(0))));\\r\\n        } else {\\r\\n            revert(\\\"Employee exist\\\");\\r\\n        }\\r\\n        return done;\\r\\n    }\\r\\n\\r\\n    function disableOrEnableEmployee(uint employeeId, bool value) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, _msgSender()) \\r\\n        returns(bool) \\r\\n    {\\r\\n        EmployeePayload memory pld = employees[employeeId];\\r\\n        if(value) {\\r\\n            require(!pld.active, \\\"Enabled\\\");\\r\\n        } else {\\r\\n            require(pld.active, \\\"Disabled\\\");\\r\\n        }\\r\\n\\r\\n        employees[employeeId].active = value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function requestAdvanceOrLoan(address employerAddr, uint employeeId, uint24 amount, string memory loanOrAdvanceStr) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, employerAddr) \\r\\n        returns(bool) \\r\\n    {\\r\\n        EmployeePayload memory pld = employees[employeeId];\\r\\n        string memory errorMessage = \\\"You have pending request\\\";\\r\\n        bool condition;\\r\\n        uint amount_ = amount * (10 ** IERC20(cUSD).decimals());\\r\\n        if(_toHash(loanOrAdvanceStr) == ADVANCE_HASH) {\\r\\n            condition = pld.advanceReq.status == LoanStatus.NONE || pld.advanceReq.status == LoanStatus.SERVICED;\\r\\n            require(amount_ <= pld.pay, \\\"Advance cannot exceed Salary\\\");\\r\\n            employees[employeeId].advanceReq = AdvanceRequest(amount_, 0, LoanStatus.REQUESTED);\\r\\n        } else if(_toHash(loanOrAdvanceStr) == LOAN_HASH) {\\r\\n            condition = pld.loanReq.status == LoanStatus.NONE || pld.loanReq.status == LoanStatus.SERVICED;\\r\\n            errorMessage = \\\"You have pending loan request\\\";\\r\\n            employees[employeeId].loanReq = LoanRequest(amount_, 0, 0, LoanStatus.REQUESTED);\\r\\n        } else {\\r\\n            revert(loanOrAdvanceStr);\\r\\n        }\\r\\n        require(condition, errorMessage);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function preparePaymentRequest(uint employeeId, uint8 txType) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, _msgSender())\\r\\n        returns(bool) \\r\\n    {\\r\\n        require(txType < 3, \\\"Invalid txn type\\\");\\r\\n        EmployeePayload memory pld = employees[employeeId];\\r\\n        pendingPayments[_msgSender()] = PendingPayment(\\r\\n            employees[employeeId],\\r\\n            TxType(txType), \\r\\n            IERC20(cUSD).balanceOf(pld.identifier),\\r\\n            uint64(block.timestamp)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approveLoanOrAdvanceRequest(uint8 interestRate, uint8 amortizationRate, string memory acceptOrRejectStr) \\r\\n        public \\r\\n        returns(bool) \\r\\n    {\\r\\n        PendingPayment memory pdp = pendingPayments[_msgSender()];\\r\\n        bool isLoan = pdp.payload.loanReq.amount > 0;\\r\\n        require(pdp.txType == TxType.LOAN, \\\"Invalid Transaction\\\");\\r\\n        require(isLoan? pdp.payload.loanReq.status == LoanStatus.REQUESTED : pdp.payload.advanceReq.status == LoanStatus.REQUESTED, \\\"Invalid request\\\");\\r\\n        uint interest = pdp.payload.loanReq.amount > 0? (pdp.payload.loanReq.amount * interestRate) / 100 : 0;\\r\\n        if(_toHash(acceptOrRejectStr) == ACCEPTED_HASH) {\\r\\n            uint amortizationAmt;\\r\\n            require(IERC20(cUSD).balanceOf(pdp.payload.identifier) >= (pdp.snapshotBal + (isLoan? pdp.payload.loanReq.amount : pdp.payload.advanceReq.amount)), \\\"Balances anomally\\\");\\r\\n            if(isLoan) {\\r\\n                amortizationAmt = ((pdp.payload.loanReq.amount + interest) * amortizationRate) / 100;\\r\\n                employees[pdp.payload.workId].loanReq = LoanRequest(\\r\\n                    pdp.payload.loanReq.amount + interest,\\r\\n                    interest,\\r\\n                    amortizationAmt,\\r\\n                    LoanStatus.DISBURSED\\r\\n                );\\r\\n            } else {\\r\\n                amortizationAmt = (pdp.payload.advanceReq.amount * amortizationRate) / 100;\\r\\n                employees[pdp.payload.workId].advanceReq = AdvanceRequest(pdp.payload.advanceReq.amount, amortizationAmt, LoanStatus.DISBURSED);\\r\\n            }\\r\\n            require(amortizationAmt <= pdp.payload.pay, \\\"Amortization exceeds pay\\\");\\r\\n        } else {\\r\\n            isLoan? delete employees[pdp.payload.workId].loanReq : delete employees[pdp.payload.workId].advanceReq; \\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function save4Me(address employerAddr, uint employeeId, bool value)\\r\\n        public\\r\\n        validateEmployeeId(employeeId, employerAddr) \\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory emp = employees[employeeId];\\r\\n        require(sender == emp.identifier, \\\"UnAuthorized call\\\");\\r\\n        employees[employeeId].saveForMe = value;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**@dev Employers pay employees\\r\\n     * Employees addition are not accepted at this point. \\r\\n     * Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid\\r\\n     * \\r\\n     * Note: Employer should send an ammount correspond to cUSD balance to cover the expected payment range.\\r\\n     */\\r\\n       function confirmPayment() public returns(bool) \\r\\n    {\\r\\n        PendingPayment memory pdp = pendingPayments[_msgSender()];\\r\\n        uint pay = _amortize(pdp.payload.workId, pdp.payload);\\r\\n        if(!pdp.payload.saveForMe) {\\r\\n            require(IERC20(cUSD).balanceOf(pdp.payload.identifier) >= (pdp.snapshotBal + pdp.payload.pay), \\\"Balances anomally\\\"); \\r\\n        } else {\\r\\n            employees[pdp.payload.workId].pay = (pay + ((pay * pdp.payload.saveForMeRate) / 100)); \\r\\n        }\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getEmployees() public view returns(EmployeePayload[] memory _returnData) {\\r\\n        _returnData = employees;\\r\\n        return _returnData;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x23d20e8a269583a9f9ce7a5586d68236f1926a7dff8aeadae4f0fe11438ef9b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "confirmPayment()": {
        "details": "Employers pay employees Employees addition are not accepted at this point.  Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid  Note: Employer should send an ammount correspond to cUSD balance to cover the expected payment range."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 154,
        "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
        "label": "isAdded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 159,
        "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
        "label": "pendingPayments",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(PendingPayment)94_storage)"
      },
      {
        "astId": 163,
        "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
        "label": "employees",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(EmployeePayload)65_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(EmployeePayload)65_storage)dyn_storage": {
        "base": "t_struct(EmployeePayload)65_storage",
        "encoding": "dynamic_array",
        "label": "struct ILoanAndSalaryAdvance.EmployeePayload[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(LoanStatus)42": {
        "encoding": "inplace",
        "label": "enum ILoanAndSalaryAdvance.LoanStatus",
        "numberOfBytes": "1"
      },
      "t_enum(TxType)37": {
        "encoding": "inplace",
        "label": "enum ILoanAndSalaryAdvance.TxType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(PendingPayment)94_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ILoanAndSalaryAdvance.PendingPayment)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingPayment)94_storage"
      },
      "t_struct(AdvanceRequest)73_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.AdvanceRequest",
        "members": [
          {
            "astId": 67,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 69,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amortizationAmt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 72,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(LoanStatus)42"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(EmployeePayload)65_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.EmployeePayload",
        "members": [
          {
            "astId": 44,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "identifier",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 46,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "employer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 48,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "workId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 50,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 52,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "saveForMe",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 54,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "pay",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 56,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "saveForMeRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 58,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amortizationRate",
            "offset": 1,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 61,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "advanceReq",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(AdvanceRequest)73_storage"
          },
          {
            "astId": 64,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "loanReq",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(LoanRequest)83_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(LoanRequest)83_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.LoanRequest",
        "members": [
          {
            "astId": 75,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 77,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "interest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 79,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amortizationAmt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 82,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(LoanStatus)42"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PendingPayment)94_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.PendingPayment",
        "members": [
          {
            "astId": 86,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "payload",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(EmployeePayload)65_storage"
          },
          {
            "astId": 89,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "txType",
            "offset": 0,
            "slot": "13",
            "type": "t_enum(TxType)37"
          },
          {
            "astId": 91,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "snapshotBal",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 93,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "callTime",
            "offset": 0,
            "slot": "15",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}