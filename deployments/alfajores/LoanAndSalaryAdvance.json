{
  "address": "0x51277b883B2220abc51AF60d8c71cE912a2fEA72",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cUSD",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "TransferFromFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACCEPTED_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADVANCE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOAN_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REJECTED_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "acceptOrRejectStr",
          "type": "string"
        }
      ],
      "name": "acceptOrRejectLoanApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "saveForMeRate",
          "type": "uint8"
        }
      ],
      "name": "addEmployee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "interestRate",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "amortizationRate",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "loanOrAdvanceStr",
          "type": "string"
        }
      ],
      "name": "approveLoanOrAdvanceRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cUSD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "disableOrEnableEmployee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmployees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "identifier",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "employer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "workId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "saveForMe",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "pay",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "saveForMeRate",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "amortizationRate",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amortizationAmt",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ILoanAndSalaryAdvance.AdvanceRequestStatus",
                  "name": "status",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ILoanAndSalaryAdvance.AdvanceRequest",
              "name": "advanceReq",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "interest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amortizationAmt",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ILoanAndSalaryAdvance.LoanRequestStatus",
                  "name": "status",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ILoanAndSalaryAdvance.LoanRequest",
              "name": "loanReq",
              "type": "tuple"
            }
          ],
          "internalType": "struct ILoanAndSalaryAdvance.EmployeePayload[]",
          "name": "_returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "amount",
          "type": "uint24"
        },
        {
          "internalType": "string",
          "name": "loanOrAdvanceStr",
          "type": "string"
        }
      ],
      "name": "requestAdvanceOrLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "save4Me",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "employeeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "acceptSaveForMe",
          "type": "bool"
        }
      ],
      "name": "sendPayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x67731509a6f16e828f41fec80c24ce2c20f0922fe595e4bb3bafe0c34308ab11",
  "receipt": {
    "to": null,
    "from": "0x7624269a420c12395B743aCF327A61f91bd23b84",
    "contractAddress": "0x51277b883B2220abc51AF60d8c71cE912a2fEA72",
    "transactionIndex": 0,
    "gasUsed": "2412965",
    "logsBloom": "0x
    "blockHash": "0x8c79531d793f98ba2f98540bbfc8bb4336745a825b32529968fba5bfa311ed64",
    "transactionHash": "0x67731509a6f16e828f41fec80c24ce2c20f0922fe595e4bb3bafe0c34308ab11",
    "logs": [],
    "blockNumber": 23630526,
    "cumulativeGasUsed": "2412965",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1"
  ],
  "numDeployments": 3,
  "solcInputHash": "e3c43b2272411fbe5f30e48cd9fb630e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cUSD\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TransferFromFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACCEPTED_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADVANCE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REJECTED_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"acceptOrRejectStr\",\"type\":\"string\"}],\"name\":\"acceptOrRejectLoanApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"saveForMeRate\",\"type\":\"uint8\"}],\"name\":\"addEmployee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"interestRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amortizationRate\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"loanOrAdvanceStr\",\"type\":\"string\"}],\"name\":\"approveLoanOrAdvanceRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"disableOrEnableEmployee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmployees\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"employer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"workId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"saveForMe\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pay\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"saveForMeRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amortizationRate\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amortizationAmt\",\"type\":\"uint256\"},{\"internalType\":\"enum ILoanAndSalaryAdvance.AdvanceRequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.AdvanceRequest\",\"name\":\"advanceReq\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amortizationAmt\",\"type\":\"uint256\"},{\"internalType\":\"enum ILoanAndSalaryAdvance.LoanRequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.LoanRequest\",\"name\":\"loanReq\",\"type\":\"tuple\"}],\"internalType\":\"struct ILoanAndSalaryAdvance.EmployeePayload[]\",\"name\":\"_returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"amount\",\"type\":\"uint24\"},{\"internalType\":\"string\",\"name\":\"loanOrAdvanceStr\",\"type\":\"string\"}],\"name\":\"requestAdvanceOrLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"save4Me\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"employeeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"acceptSaveForMe\",\"type\":\"bool\"}],\"name\":\"sendPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"sendPayment(uint256,bool)\":{\"details\":\"Employers pay employees Employees addition are not accepted at this point.  Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid Note: pay() is atomic by context i.e transfer to all employees must pass simultaneously.      Employers should ensure enough allowance is given to cover the pays.  Note: Employers can select the range of empployees to pay. This is done using the { start } and { stop } flags.       These flags neither can exceed the number of employees in storage nor can start eceeds stop.\",\"params\":{\"acceptSaveForMe\":\": Employer should specify if they're willing to save for employees by holding their pay in custody until otherwise canceled by the employee.                           This attracts interests compounded on the principal pay.  Note: Employer should give enough allowance correspond to cUSD balance to cover the expected payment range.\",\"employeeId\":\": Id assigned to employee at registration point. It corresponds to their position in the EmployeePayload array.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol\":\"LoanAndSalaryAdvance\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/loanAndSalaryAdvance/ILoanAndSalaryAdvance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface ILoanAndSalaryAdvance {\\r\\n    error TransferFromFailed();\\r\\n\\r\\n    enum AdvanceRequestStatus {NONE, PENDING, DISBURSED, SERVICED}\\r\\n    enum LoanRequestStatus {NONE, REQUESTED, RESPONDED, ACCEPTED, SERVICED}\\r\\n    struct EmployeePayload {\\r\\n        address identifier;\\r\\n        address employer;\\r\\n        uint workId;\\r\\n        bool active;\\r\\n        bool saveForMe;\\r\\n        uint pay;\\r\\n        uint8 saveForMeRate;\\r\\n        uint8 amortizationRate;\\r\\n        AdvanceRequest advanceReq;\\r\\n        LoanRequest loanReq;\\r\\n    }\\r\\n\\r\\n    struct AdvanceRequest {\\r\\n        uint amount;\\r\\n        uint amortizationAmt;\\r\\n        AdvanceRequestStatus status;\\r\\n    }\\r\\n\\r\\n    struct LoanRequest {\\r\\n        uint amount;\\r\\n        uint interest;\\r\\n        uint amortizationAmt;\\r\\n        LoanRequestStatus status;\\r\\n    }\\r\\n\\r\\n    // struct EmployerInfo {\\r\\n    //     bool isEmployer;\\r\\n    //     uint id;\\r\\n    // }\\r\\n\\r\\n    function sendPayment(uint employeeId, bool acceptSaveForMe) external returns(bool);\\r\\n    function save4Me(address employerAddr, uint employeeId, bool value) external returns(bool);\\r\\n    function acceptOrRejectLoanApproval(address employerAddr, uint employeeId, string memory acceptOrRejectStr) external returns(bool);\\r\\n    function approveLoanOrAdvanceRequest(uint employeeId, uint8 interestRate, uint8 amortizationRate, string memory loanOrAdvanceStr) external returns(bool);\\r\\n    function requestAdvanceOrLoan(address employerAddr, uint employeeId, uint24 amount, string memory loanOrAdvanceStr) external returns(bool);\\r\\n    function disableOrEnableEmployee(uint employeeId, bool value) external returns(bool);\\r\\n    function addEmployee(address addresses, uint256 payments, uint8 saveForMeRate) external returns(bool done);\\r\\n    \\r\\n}\",\"keccak256\":\"0x37cd4730b79f4a9ae72660515beeeba3b04dbf83055cde6cdb3531864d40dafd\",\"license\":\"MIT\"},\"contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\n\\r\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport { ILoanAndSalaryAdvance } from \\\"./ILoanAndSalaryAdvance.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns(uint8);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ncontract LoanAndSalaryAdvance is Context, ILoanAndSalaryAdvance {\\r\\n    address public immutable cUSD;\\r\\n    bytes32 public immutable LOAN_HASH;\\r\\n    bytes32 public immutable ADVANCE_HASH;\\r\\n    bytes32 public immutable ACCEPTED_HASH;\\r\\n    bytes32 public immutable REJECTED_HASH;\\r\\n\\r\\n    // mapping (address => EmployeePayload[]) public employees;\\r\\n    mapping (address => mapping (address => bool)) private isAdded;\\r\\n\\r\\n    EmployeePayload[] private employees;\\r\\n\\r\\n    modifier validateEmployeeId(uint employeeId, address employer) {\\r\\n        require(employeeId < employees.length, \\\"Invalid employeeId\\\");\\r\\n        require(employees[employeeId].employer == employer, \\\"Not an employer of employeeId\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (address _cUSD) {\\r\\n        if(_cUSD == address(0)) revert();\\r\\n        cUSD = _cUSD;\\r\\n        LOAN_HASH = _toHash(\\\"LOAN\\\");\\r\\n        ADVANCE_HASH = _toHash(\\\"ADVANCE\\\");\\r\\n        ACCEPTED_HASH = _toHash(\\\"ACCEPTED\\\");\\r\\n        REJECTED_HASH = _toHash(\\\"REJECTED\\\");\\r\\n    }\\r\\n\\r\\n    receive() external payable { revert(); }\\r\\n\\r\\n    function _toHash(string memory loanOrHashStr) internal pure returns(bytes32 _hash) {\\r\\n        return keccak256(abi.encode(loanOrHashStr));\\r\\n    }\\r\\n\\r\\n    function _sendPayment(address from, address to, uint amount) private {\\r\\n        if(!IERC20(cUSD).transferFrom(from, to, amount)) revert TransferFromFailed();\\r\\n    }\\r\\n\\r\\n    function _amortize(uint employeeId, EmployeePayload memory pld) internal returns(uint payBalance) {\\r\\n        if(pld.loanReq.amount > 0) {\\r\\n            uint loanBal = pld.loanReq.amount;\\r\\n            pld.loanReq.amortizationAmt <= loanBal? \\r\\n                (loanBal -= pld.loanReq.amortizationAmt, payBalance = pld.pay - pld.loanReq.amortizationAmt) : \\r\\n                    (loanBal -= loanBal, payBalance = pld.pay - loanBal);\\r\\n            employees[employeeId].loanReq.amount = loanBal;\\r\\n            if(loanBal > 0) {\\r\\n                employees[employeeId].loanReq.status = LoanRequestStatus.SERVICED;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(pld.advanceReq.amount > 0) {\\r\\n            uint loanBal = pld.advanceReq.amount;\\r\\n            pld.advanceReq.amortizationAmt <= loanBal? \\r\\n                (loanBal -= pld.advanceReq.amortizationAmt, payBalance = pld.pay - pld.advanceReq.amortizationAmt) : \\r\\n                    (loanBal -= loanBal, payBalance = pld.pay - loanBal);\\r\\n            employees[employeeId].advanceReq.amount = loanBal;\\r\\n            if(loanBal > 0) {\\r\\n                employees[employeeId].advanceReq.status = AdvanceRequestStatus.SERVICED;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function addEmployee(address employee, uint256 payment, uint8 saveForMeRate) public returns(bool done) {\\r\\n        address sender = _msgSender();\\r\\n        require(employee != address(0), \\\"Addresses is empty\\\");\\r\\n        if(!isAdded[sender][employee]) {\\r\\n            isAdded[sender][employee] = true;\\r\\n            employees.push(EmployeePayload( employee, sender, employees.length, true, false, payment, saveForMeRate, 0, AdvanceRequest(0, 0, AdvanceRequestStatus(0)), LoanRequest(0, 0, 0, LoanRequestStatus(0))));\\r\\n        }\\r\\n        return done;\\r\\n    }\\r\\n\\r\\n    function disableOrEnableEmployee(uint employeeId, bool value) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, _msgSender()) \\r\\n        returns(bool) \\r\\n    {\\r\\n        EmployeePayload memory pld = employees[employeeId];\\r\\n        if(value) {\\r\\n            require(!pld.active, \\\"Enabled\\\");\\r\\n        } else {\\r\\n            require(pld.active, \\\"Disabled\\\");\\r\\n        }\\r\\n\\r\\n        employees[employeeId].active = value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function requestAdvanceOrLoan(address employerAddr, uint employeeId, uint24 amount, string memory loanOrAdvanceStr) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, employerAddr) \\r\\n        returns(bool) \\r\\n    {\\r\\n        EmployeePayload memory pld = employees[employeeId];\\r\\n        string memory errorMessage = \\\"You have pending request\\\";\\r\\n        bool condition;\\r\\n        uint amount_ = amount * (10 ** IERC20(cUSD).decimals());\\r\\n        if(_toHash(loanOrAdvanceStr) == ADVANCE_HASH) {\\r\\n            condition = pld.advanceReq.status == AdvanceRequestStatus.NONE || pld.advanceReq.status == AdvanceRequestStatus.SERVICED;\\r\\n            require(amount_ <= pld.pay, \\\"Advance cannot exceed Salary\\\");\\r\\n            employees[employeeId].advanceReq = AdvanceRequest(amount_, 0, AdvanceRequestStatus.PENDING);\\r\\n        } else if(_toHash(loanOrAdvanceStr) == LOAN_HASH) {\\r\\n            condition = pld.loanReq.status == LoanRequestStatus.NONE || pld.loanReq.status == LoanRequestStatus.SERVICED;\\r\\n            errorMessage = \\\"You have pending loan request\\\";\\r\\n            employees[employeeId].loanReq = LoanRequest(amount_, 0, 0, LoanRequestStatus.REQUESTED);\\r\\n        } else {\\r\\n            revert(loanOrAdvanceStr);\\r\\n        }\\r\\n        require(condition, errorMessage);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approveLoanOrAdvanceRequest(uint employeeId, uint8 interestRate, uint8 amortizationRate, string memory loanOrAdvanceStr) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, _msgSender()) \\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory pld = employees[employeeId];\\r\\n        require(pld.active, \\\"Disabled\\\");\\r\\n        uint allowance = IERC20(cUSD).allowance(sender, address(this));\\r\\n        uint interest = (allowance * interestRate) / 100;\\r\\n        uint amortizationAmt = ((allowance + interest) * amortizationRate) / 100;\\r\\n        require(amortizationAmt <= pld.pay, \\\"Amortization exceeds pay\\\");\\r\\n        if(_toHash(loanOrAdvanceStr) == ADVANCE_HASH) {\\r\\n            require(pld.advanceReq.status == AdvanceRequestStatus.PENDING, \\\"Invalid request\\\");\\r\\n            employees[employeeId].advanceReq = AdvanceRequest(allowance, amortizationAmt, AdvanceRequestStatus.DISBURSED);\\r\\n            _sendPayment(sender, pld.identifier, allowance);\\r\\n        } else if(_toHash(loanOrAdvanceStr) == LOAN_HASH) {\\r\\n            require(pld.loanReq.status == LoanRequestStatus.REQUESTED, \\\"Invalid request\\\");\\r\\n            employees[employeeId].loanReq = LoanRequest(\\r\\n                allowance + interest,\\r\\n                interest,\\r\\n                amortizationAmt,\\r\\n                LoanRequestStatus.RESPONDED\\r\\n            );\\r\\n        } else {\\r\\n            revert (loanOrAdvanceStr);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function acceptOrRejectLoanApproval(address employerAddr, uint employeeId, string memory acceptOrRejectStr) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, employerAddr)\\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory emp = employees[employeeId];\\r\\n        uint allowance = IERC20(cUSD).allowance(employerAddr, address(this));\\r\\n        require(sender == emp.identifier, \\\"UnAuthorized call\\\");\\r\\n        if(allowance > 0) {\\r\\n            if(_toHash(acceptOrRejectStr) == ACCEPTED_HASH) {\\r\\n                employees[employeeId].loanReq.status = LoanRequestStatus.ACCEPTED;\\r\\n                _sendPayment(employerAddr, emp.identifier, allowance);\\r\\n            } else if(_toHash(acceptOrRejectStr) == REJECTED_HASH) {\\r\\n                delete employees[employeeId].loanReq;\\r\\n            } else {\\r\\n                revert (acceptOrRejectStr);\\r\\n            }\\r\\n        } else {\\r\\n            delete employees[employeeId].loanReq;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function save4Me(address employerAddr, uint employeeId, bool value)\\r\\n        public\\r\\n        validateEmployeeId(employeeId, employerAddr) \\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory emp = employees[employeeId];\\r\\n        require(sender == emp.identifier, \\\"UnAuthorized call\\\");\\r\\n        employees[employeeId].saveForMe = value;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**@dev Employers pay employees\\r\\n     * Employees addition are not accepted at this point. \\r\\n     * Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid\\r\\n     * Note: pay() is atomic by context i.e transfer to all employees must pass simultaneously.\\r\\n     *      Employers should ensure enough allowance is given to cover the pays.\\r\\n     * \\r\\n     * Note: Employers can select the range of empployees to pay. This is done using the { start } and { stop } flags.\\r\\n     *       These flags neither can exceed the number of employees in storage nor can start eceeds stop.\\r\\n     * @param employeeId : Id assigned to employee at registration point. It corresponds to their position in the EmployeePayload array.\\r\\n     * @param acceptSaveForMe : Employer should specify if they're willing to save for employees by holding their pay in custody until otherwise canceled by the employee. \\r\\n     *                          This attracts interests compounded on the principal pay. \\r\\n     * Note: Employer should give enough allowance correspond to cUSD balance to cover the expected payment range.\\r\\n     */\\r\\n    function sendPayment(uint employeeId, bool acceptSaveForMe) \\r\\n        public \\r\\n        validateEmployeeId(employeeId, _msgSender())\\r\\n        returns(bool) \\r\\n    {\\r\\n        address sender = _msgSender();\\r\\n        EmployeePayload memory pld = employees[employeeId];\\r\\n        uint allowance = IERC20(cUSD).allowance(sender, address(this));\\r\\n        uint pay = _amortize(employeeId, pld);\\r\\n        require(allowance >= pay, \\\"Not enough balance\\\");\\r\\n        if(!pld.saveForMe) {\\r\\n            _sendPayment(sender, pld.identifier, pay);\\r\\n        }\\r\\n        if(pld.saveForMe && acceptSaveForMe) {\\r\\n            employees[employeeId].pay += (pld.pay + ((pld.pay * pld.saveForMeRate) / 100));\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getEmployees() public view returns(EmployeePayload[] memory _returnData) {\\r\\n        _returnData = employees;\\r\\n        return _returnData;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xaa40ce09fac92e0a1043c932413a9b580fd4232ce1131b7a71094dbcc278af88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162002d7838038062002d788339810160408190526200003591620001bc565b600160a060020a0381166200004957600080fd5b600160a060020a03811660805260408051808201909152600481527f4c4f414e0000000000000000000000000000000000000000000000000000000060208201526200009e906401000000006200018a810204565b60a05260408051808201909152600781527f414456414e4345000000000000000000000000000000000000000000000000006020820152620000e9906401000000006200018a810204565b60c05260408051808201909152600881527f4143434550544544000000000000000000000000000000000000000000000000602082015262000134906401000000006200018a810204565b60e05260408051808201909152600881527f52454a454354454400000000000000000000000000000000000000000000000060208201526200017f906401000000006200018a810204565b61010052506200023e565b6000816040516020016200019f9190620001ee565b604051602081830303815290604052805190602001209050919050565b600060208284031215620001cf57600080fd5b8151600160a060020a0381168114620001e757600080fd5b9392505050565b600060208083528351808285015260005b818110156200021d57858101830151858201604001528201620001ff565b506000604082860101526040601f19601f8301168501019250505092915050565b60805160a05160c05160e05161010051612aa8620002d060003960008181610269015261170a01526000818161031101526116800152600081816101a7015281816110830152611b7c0152600081816102dd015281816111d90152611cb00152600081816101040152818161056701528181610fc9015281816115a301528181611a6f01526123210152612aa86000f3fe6080604052600436106100e3576000357c01000000000000000000000000000000000000000000000000000000009004806380c231eb1161009c57806393e5cb4e1161007657806393e5cb4e1461028b578063b2bf0bab146102ab578063c5a5955e146102cb578063ddfa4324146102ff57600080fd5b806380c231eb1461021757806381a0941614610237578063883281c41461025757600080fd5b80631fccf672146100f2578063423a2219146101435780634abefa36146101735780635fdc32d11461019557806371a0a6fb146101d7578063759fe169146101f757600080fd5b366100ed57600080fd5b600080fd5b3480156100fe57600080fd5b506101267f000000000000000000000000000000000000000000000000000000000000000081565b604051600160a060020a0390911681526020015b60405180910390f35b34801561014f57600080fd5b5061016361015e36600461240a565b610333565b604051901515815260200161013a565b34801561017f57600080fd5b506101886106da565b60405161013a91906124b9565b3480156101a157600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161013a565b3480156101e357600080fd5b506101636101f23660046125a7565b610869565b34801561020357600080fd5b506101636102123660046125f6565b610b00565b34801561022357600080fd5b506101636102323660046126d1565b610da1565b34801561024357600080fd5b50610163610252366004612743565b611375565b34801561026357600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b34801561029757600080fd5b506101636102a636600461279a565b6117f0565b3480156102b757600080fd5b506101636102c636600461240a565b611e0f565b3480156102d757600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b34801561030b57600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b6000823360015482106103645760405160e560020a62461bcd02815260040161035b906127d2565b60405180910390fd5b80600160a060020a03166001838154811061038157610381612809565b600091825260209091206001600d909202010154600160a060020a0316146103be5760405160e560020a62461bcd02815260040161035b90612822565b60003390506000600187815481106103d8576103d8612809565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e08801528551908101865260068501805482526007860154988201989098526008850154969794969288019590949390850192909116908111156104a1576104a161243a565b60038111156104b2576104b261243a565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600481111561050c5761050c61243a565b600481111561051d5761051d61243a565b9052509052506040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301523060248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e90604401602060405180830381865afa1580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d29190612859565b905060006105e089846120e9565b9050808210156106355760405160e560020a62461bcd02815260206004820152601260248201527f4e6f7420656e6f7567682062616c616e63650000000000000000000000000000604482015260640161035b565b826080015161064d5761064d848460000151836122da565b8260800151801561065b5750875b156106cb5760648360c0015160ff168460a00151610679919061288b565b61068391906128a2565b8360a0015161069291906128c7565b60018a815481106106a5576106a5612809565b90600052602060002090600d020160040160008282546106c591906128c7565b90915550505b50600198975050505050505050565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156108605760008481526020908190206040805161014081018252600d86029092018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e08801528551908101865260068501805482526007860154988201989098526008850154969794969288019590949390850192909116908111156107ce576107ce61243a565b60038111156107df576107df61243a565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660048111156108395761083961243a565b600481111561084a5761084a61243a565b90525090525081526001909101906020016106fe565b50505050905090565b6000828460018054905082106108945760405160e560020a62461bcd02815260040161035b906127d2565b80600160a060020a0316600183815481106108b1576108b1612809565b600091825260209091206001600d909202010154600160a060020a0316146108ee5760405160e560020a62461bcd02815260040161035b90612822565b600033905060006001878154811061090857610908612809565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e08801528551908101865260068501805482526007860154988201989098526008850154969794969288019590949390850192909116908111156109d1576109d161243a565b60038111156109e2576109e261243a565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115610a3c57610a3c61243a565b6004811115610a4d57610a4d61243a565b9052509052508051909150600160a060020a03838116911614610ab55760405160e560020a62461bcd02815260206004820152601160248201527f556e417574686f72697a65642063616c6c000000000000000000000000000000604482015260640161035b565b8560018881548110610ac957610ac9612809565b90600052602060002090600d020160030160016101000a81548160ff02191690831515021790555060019450505050509392505050565b600033600160a060020a038516610b5c5760405160e560020a62461bcd02815260206004820152601260248201527f41646472657373657320697320656d7074790000000000000000000000000000604482015260640161035b565b600160a060020a038082166000908152602081815260408083209389168352929052205460ff16610d9957600160a060020a03818116600081815260208181526040808320948a16808452948252808320805460ff19166001908117909155815161014081018352958652858301949094528354858201526060808601859052608080870185905260a087018b905260ff8a1660c088015260e08701859052825180830184528581528085018690528084018690526101008801528251908101835284815292830184905290820183905292939261012084019290820152905281546001808201845560009384526020938490208351600d90930201805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a039485161782558486015182840180549092169416939093179092556040808401516002840155606084015160038085018054608088015161ffff1991821694151561ff0019169490941761010094151585021790915560a0870151600487015560c087015160058701805460e08a015160ff93841691909416179190921684021790559085015180516006860190815596810151600786015591820151600885018054969795969395949193909260ff1990911691908490811115610d4257610d4261243a565b021790555050506101208201518051600983019081556020820151600a8401556040820151600b8401556060820151600c8401805460ff19166001836004811115610d8f57610d8f61243a565b0217905550505050505b509392505050565b600083856001805490508210610dcc5760405160e560020a62461bcd02815260040161035b906127d2565b80600160a060020a031660018381548110610de957610de9612809565b600091825260209091206001600d909202010154600160a060020a031614610e265760405160e560020a62461bcd02815260040161035b90612822565b600060018781548110610e3b57610e3b612809565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e0880152855190810186526006850180548252600786015498820198909852600885015496979496928801959094939085019290911690811115610f0457610f0461243a565b6003811115610f1557610f1561243a565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115610f6f57610f6f61243a565b6004811115610f8057610f8061243a565b8152505081525050905060006040518060400160405280601881526020017f596f7520686176652070656e64696e672072657175657374000000000000000081525090506000807f0000000000000000000000000000000000000000000000000000000000000000600160a060020a031663313ce5676040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381865afa158015611041573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106591906128da565b61107090600a6129e5565b61107f9062ffffff8b1661288b565b90507f00000000000000000000000000000000000000000000000000000000000000006110ab896123c9565b036111d75760008461010001516040015160038111156110cd576110cd61243a565b14806110f3575060038461010001516040015160038111156110f1576110f161243a565b145b91508360a0015181111561114c5760405160e560020a62461bcd02815260206004820152601c60248201527f416476616e63652063616e6e6f74206578636565642053616c61727900000000604482015260640161035b565b6040805160608101825282815260006020820152908101600181525060018b8154811061117b5761117b612809565b90600052602060002090600d0201600601600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360038111156111ca576111ca61243a565b0217905550905050611341565b7f0000000000000000000000000000000000000000000000000000000000000000611201896123c9565b036113245760008461012001516060015160048111156112235761122361243a565b1480611249575060048461012001516060015160048111156112475761124761243a565b145b91506040518060400160405280601d81526020017f596f7520686176652070656e64696e67206c6f616e2072657175657374000000815250925060405180608001604052808281526020016000815260200160008152602001600160048111156112b5576112b561243a565b81525060018b815481106112cb576112cb612809565b90600052602060002090600d020160090160008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908360048111156111ca576111ca61243a565b8760405160e560020a62461bcd02815260040161035b91906129f4565b82826113635760405160e560020a62461bcd02815260040161035b91906129f4565b5060019b9a5050505050505050505050565b6000828460018054905082106113a05760405160e560020a62461bcd02815260040161035b906127d2565b80600160a060020a0316600183815481106113bd576113bd612809565b600091825260209091206001600d909202010154600160a060020a0316146113fa5760405160e560020a62461bcd02815260040161035b90612822565b600033905060006001878154811061141457611414612809565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e08801528551908101865260068501805482526007860154988201989098526008850154969794969288019590949390850192909116908111156114dd576114dd61243a565b60038111156114ee576114ee61243a565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660048111156115485761154861243a565b60048111156115595761155961243a565b9052509052506040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a038a811660048301523060248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e90604401602060405180830381865afa1580156115ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160e9190612859565b90508160000151600160a060020a031683600160a060020a0316146116785760405160e560020a62461bcd02815260206004820152601160248201527f556e417574686f72697a65642063616c6c000000000000000000000000000000604482015260640161035b565b801561179d577f00000000000000000000000000000000000000000000000000000000000000006116a8886123c9565b03611708576003600189815481106116c2576116c2612809565b60009182526020909120600c600d9092020101805460ff191660018360048111156116ef576116ef61243a565b0217905550611703898360000151836122da565b6106cb565b7f0000000000000000000000000000000000000000000000000000000000000000611732886123c9565b03611780576001888154811061174a5761174a612809565b6000918252602082206009600d90920201908101829055600a8101829055600b810191909155600c01805460ff191690556106cb565b8660405160e560020a62461bcd02815260040161035b91906129f4565b600188815481106117b0576117b0612809565b6000918252602082206009600d90920201908101829055600a8101829055600b810191909155600c01805460ff1916905550600198975050505050505050565b6000843360015482106118185760405160e560020a62461bcd02815260040161035b906127d2565b80600160a060020a03166001838154811061183557611835612809565b600091825260209091206001600d909202010154600160a060020a0316146118725760405160e560020a62461bcd02815260040161035b90612822565b600033905060006001898154811061188c5761188c612809565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e08801528551908101865260068501805482526007860154988201989098526008850154969794969288019590949390850192909116908111156119555761195561243a565b60038111156119665761196661243a565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660048111156119c0576119c061243a565b60048111156119d1576119d161243a565b9052509052506060810151909150611a2e5760405160e560020a62461bcd02815260206004820152600860248201527f44697361626c6564000000000000000000000000000000000000000000000000604482015260640161035b565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a0383811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e90604401602060405180830381865afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc9190612859565b905060006064611aef60ff8c168461288b565b611af991906128a2565b90506000606460ff8b16611b0d84866128c7565b611b17919061288b565b611b2191906128a2565b90508360a00151811115611b7a5760405160e560020a62461bcd02815260206004820152601860248201527f416d6f7274697a6174696f6e2065786365656473207061790000000000000000604482015260640161035b565b7f0000000000000000000000000000000000000000000000000000000000000000611ba48a6123c9565b03611cae576001846101000151604001516003811115611bc657611bc661243a565b14611c165760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c696420726571756573740000000000000000000000000000000000604482015260640161035b565b6040805160608101825284815260208101839052908101600281525060018d81548110611c4557611c45612809565b90600052602060002090600d0201600601600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690836003811115611c9457611c9461243a565b0217905550508451611ca991508690856122da565b611363565b7f0000000000000000000000000000000000000000000000000000000000000000611cd88a6123c9565b03611df2576001846101200151606001516004811115611cfa57611cfa61243a565b14611d4a5760405160e560020a62461bcd02815260206004820152600f60248201527f496e76616c696420726571756573740000000000000000000000000000000000604482015260640161035b565b60405180608001604052808385611d6191906128c7565b81526020810184905260408101839052606001600281525060018d81548110611d8c57611d8c612809565b90600052602060002090600d020160090160008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690836004811115611de557611de561243a565b0217905550905050611363565b8860405160e560020a62461bcd02815260040161035b91906129f4565b600082336001548210611e375760405160e560020a62461bcd02815260040161035b906127d2565b80600160a060020a031660018381548110611e5457611e54612809565b600091825260209091206001600d909202010154600160a060020a031614611e915760405160e560020a62461bcd02815260040161035b90612822565b600060018681548110611ea657611ea6612809565b60009182526020918290206040805161014081018252600d9093029091018054600160a060020a0390811684526001820154168385015260028101548383015260038082015460ff808216151560608088019190915261010092839004821615156080880152600485015460a0880152600585015480831660c0890152839004821660e0880152855190810186526006850180548252600786015498820198909852600885015496979496928801959094939085019290911690811115611f6f57611f6f61243a565b6003811115611f8057611f8061243a565b815250508152602001600982016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115611fda57611fda61243a565b6004811115611feb57611feb61243a565b905250905250905084156120535780606001511561204e5760405160e560020a62461bcd02815260206004820152600760248201527f456e61626c656400000000000000000000000000000000000000000000000000604482015260640161035b565b6120a7565b80606001516120a75760405160e560020a62461bcd02815260206004820152600860248201527f44697361626c6564000000000000000000000000000000000000000000000000604482015260640161035b565b84600187815481106120bb576120bb612809565b60009182526020909120600d90910201600301805460ff191691151591909117905550600195945050505050565b61012081015151600090156121e0576101208201518051604090910151811015612132576121178180612a42565b905080818460a0015161212a9190612a42565b925082612166565b610120830151604001516121469082612a42565b905080836101200151604001518460a001516121629190612a42565b9250825b5050806001858154811061217c5761217c612809565b600091825260209091206009600d90920201015580156121de576004600185815481106121ab576121ab612809565b60009182526020909120600c600d9092020101805460ff191660018360048111156121d8576121d861243a565b02179055505b505b61010082015151156122d45761010082015180516020909101518110156122265761220b8180612a42565b905080818460a0015161221e9190612a42565b92508261225a565b6101008301516020015161223a9082612a42565b905080836101000151602001518460a001516122569190612a42565b9250825b5050806001858154811061227057612270612809565b600091825260209091206006600d90920201015580156122d25760036001858154811061229f5761229f612809565b600091825260209091206008600d9092020101805460ff191660018360038111156122cc576122cc61243a565b02179055505b505b92915050565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301528381166024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af115801561236a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238e9190612a55565b6123c4576040517f7939f42400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6000816040516020016123dc91906129f4565b604051602081830303815290604052805190602001209050919050565b801515811461240757600080fd5b50565b6000806040838503121561241d57600080fd5b82359150602083013561242f816123f9565b809150509250929050565b60e060020a634e487b7102600052602160045260246000fd5b80518252602081015160208301526040810151600481106124765761247661243a565b806040840152505050565b8051825260208101516020830152604081015160408301526060810151600581106124ae576124ae61243a565b806060840152505050565b602080825282518282018190526000919060409081850190868401855b8281101561257e5781518051600160a060020a039081168652878201511687860152858101518686015260608082015115159086015260808082015115159086015260a0808201519086015260c08082015160ff9081169187019190915260e080830151909116908601526101008082015161255482880182612453565b50506101200151612569610160860182612481565b506101e09390930192908501906001016124d6565b5091979650505050505050565b8035600160a060020a03811681146125a257600080fd5b919050565b6000806000606084860312156125bc57600080fd5b6125c58461258b565b92506020840135915060408401356125dc816123f9565b809150509250925092565b60ff8116811461240757600080fd5b60008060006060848603121561260b57600080fd5b6126148461258b565b92506020840135915060408401356125dc816125e7565b60e060020a634e487b7102600052604160045260246000fd5b600082601f83011261265557600080fd5b813567ffffffffffffffff808211156126705761267061262b565b604051601f8301601f19908116603f011681019082821181831017156126985761269861262b565b816040528381528660208588010111156126b157600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156126e757600080fd5b6126f08561258b565b935060208501359250604085013562ffffff8116811461270f57600080fd5b9150606085013567ffffffffffffffff81111561272b57600080fd5b61273787828801612644565b91505092959194509250565b60008060006060848603121561275857600080fd5b6127618461258b565b925060208401359150604084013567ffffffffffffffff81111561278457600080fd5b61279086828701612644565b9150509250925092565b600080600080608085870312156127b057600080fd5b8435935060208501356127c2816125e7565b9250604085013561270f816125e7565b60208082526012908201527f496e76616c696420656d706c6f79656549640000000000000000000000000000604082015260600190565b60e060020a634e487b7102600052603260045260246000fd5b6020808252601d908201527f4e6f7420616e20656d706c6f796572206f6620656d706c6f7965654964000000604082015260600190565b60006020828403121561286b57600080fd5b5051919050565b60e060020a634e487b7102600052601160045260246000fd5b80820281158282048414176122d4576122d4612872565b6000826128c25760e060020a634e487b7102600052601260045260246000fd5b500490565b808201808211156122d4576122d4612872565b6000602082840312156128ec57600080fd5b81516128f7816125e7565b9392505050565b600181815b8085111561293b57816000190482111561291f5761291f612872565b8085161561292c57918102915b60029094049390800290612903565b509250929050565b600082612952575060016122d4565b8161295f575060006122d4565b8160018114612975576002811461297f5761299c565b60019150506122d4565b60ff84111561299057612990612872565b8360020a9150506122d4565b5060208310610133831016604e8410600b84101617156129bf575081810a6122d4565b6129c983836128fe565b80600019048211156129dd576129dd612872565b029392505050565b60006128f760ff841683612943565b600060208083528351808285015260005b81811015612a2157858101830151858201604001528201612a05565b506000604082860101526040601f19601f8301168501019250505092915050565b818103818111156122d4576122d4612872565b600060208284031215612a6757600080fd5b81516128f7816123f956fea2646970667358221220fb19024d7458fc07802de9cc6999bb53d866e09572c167dbbd6babcae8540d6364736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "sendPayment(uint256,bool)": {
        "details": "Employers pay employees Employees addition are not accepted at this point.  Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid Note: pay() is atomic by context i.e transfer to all employees must pass simultaneously.      Employers should ensure enough allowance is given to cover the pays.  Note: Employers can select the range of empployees to pay. This is done using the { start } and { stop } flags.       These flags neither can exceed the number of employees in storage nor can start eceeds stop.",
        "params": {
          "acceptSaveForMe": ": Employer should specify if they're willing to save for employees by holding their pay in custody until otherwise canceled by the employee.                           This attracts interests compounded on the principal pay.  Note: Employer should give enough allowance correspond to cUSD balance to cover the expected payment range.",
          "employeeId": ": Id assigned to employee at registration point. It corresponds to their position in the EmployeePayload array."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 215,
        "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
        "label": "isAdded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 219,
        "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
        "label": "employees",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(EmployeePayload)67_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(EmployeePayload)67_storage)dyn_storage": {
        "base": "t_struct(EmployeePayload)67_storage",
        "encoding": "dynamic_array",
        "label": "struct ILoanAndSalaryAdvance.EmployeePayload[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(AdvanceRequestStatus)38": {
        "encoding": "inplace",
        "label": "enum ILoanAndSalaryAdvance.AdvanceRequestStatus",
        "numberOfBytes": "1"
      },
      "t_enum(LoanRequestStatus)44": {
        "encoding": "inplace",
        "label": "enum ILoanAndSalaryAdvance.LoanRequestStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_struct(AdvanceRequest)75_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.AdvanceRequest",
        "members": [
          {
            "astId": 69,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 71,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amortizationAmt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 74,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(AdvanceRequestStatus)38"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(EmployeePayload)67_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.EmployeePayload",
        "members": [
          {
            "astId": 46,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "identifier",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 48,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "employer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 50,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "workId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 52,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 54,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "saveForMe",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 56,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "pay",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 58,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "saveForMeRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 60,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amortizationRate",
            "offset": 1,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 63,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "advanceReq",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(AdvanceRequest)75_storage"
          },
          {
            "astId": 66,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "loanReq",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(LoanRequest)85_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(LoanRequest)85_storage": {
        "encoding": "inplace",
        "label": "struct ILoanAndSalaryAdvance.LoanRequest",
        "members": [
          {
            "astId": 77,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 79,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "interest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 81,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "amortizationAmt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 84,
            "contract": "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol:LoanAndSalaryAdvance",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(LoanRequestStatus)44"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}