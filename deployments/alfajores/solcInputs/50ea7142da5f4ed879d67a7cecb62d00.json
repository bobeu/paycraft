{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/loanAndSalaryAdvance/ILoanAndSalaryAdvance.sol": {
      "content": "// SPDX-License-Identifier: MIT \r\n\r\npragma solidity 0.8.20;\r\n\r\ninterface ILoanAndSalaryAdvance {\r\n    error TransferFromFailed();\r\n\r\n    enum AdvanceRequestStatus {NONE, PENDING, DISBURSED, SERVICED}\r\n    enum LoanRequestStatus {NONE, REQUESTED, RESPONDED, ACCEPTED, SERVICED}\r\n    struct EmployeePayload {\r\n        address identifier;\r\n        uint workId;\r\n        bool active;\r\n        bool saveForMe;\r\n        uint pay;\r\n        uint8 saveForMeRate;\r\n        uint8 amortizationRate;\r\n        AdvanceRequest advanceReq;\r\n        LoanRequest loanReq;\r\n    }\r\n\r\n    struct AdvanceRequest {\r\n        uint amount;\r\n        uint amortizationAmt;\r\n        AdvanceRequestStatus status;\r\n    }\r\n\r\n    struct LoanRequest {\r\n        uint amount;\r\n        uint interest;\r\n        uint amortizationAmt;\r\n        LoanRequestStatus status;\r\n    }\r\n\r\n    // struct EmployerInfo {\r\n    //     bool isEmployer;\r\n    //     uint id;\r\n    // }\r\n\r\n    function sendPayment(uint employeeId, bool acceptSaveForMe, uint start, uint stop) external returns(bool);\r\n    function save4Me(address employerAddr, uint employeeId, bool value) external returns(bool);\r\n    function acceptOrRejectLoanApproval(address employerAddr, uint employeeId, string memory acceptOrRejectStr) external returns(bool);\r\n    function approveLoanOrAdvanceRequest(uint employeeId, uint8 interestRate, uint8 amortizationRate, string memory loanOrAdvanceStr) external returns(bool);\r\n    function requestAdvanceOrLoan(address employerAddr, uint employeeId, uint amount, string memory loanOrAdvanceStr) external returns(bool);\r\n    function disableOrEnableEmployee(uint employeeId, bool value) external returns(bool);\r\n    function addEmployee(address[] memory addresses, uint256[] memory payments, uint8 saveForMeRate, uint8 amortizationRate) external returns(bool done);\r\n    \r\n}"
    },
    "contracts/loanAndSalaryAdvance/LoanAndSalaryAdvance.sol": {
      "content": "// SPDX-License-Identifier: MIT \r\n\r\nimport { Context } from \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport { ILoanAndSalaryAdvance } from \"./ILoanAndSalaryAdvance.sol\";\r\n\r\ninterface IERC20 {\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\npragma solidity 0.8.20;\r\n\r\ncontract LoanAndSalaryAdvance is Context, ILoanAndSalaryAdvance {\r\n    address public immutable cUSD;\r\n    bytes32 public immutable LOAN_HASH;\r\n    bytes32 public immutable ADVANCE_HASH;\r\n    bytes32 public immutable ACCEPTED_HASH;\r\n    bytes32 public immutable REJECTED_HASH;\r\n\r\n    mapping (address => EmployeePayload[]) public employees;\r\n    mapping (address => mapping (address => bool)) private isAdded;\r\n\r\n    modifier validateEmployeeId(uint employeeId, address employer) {\r\n        require(employeeId < employees[employer].length, \"Invalid employeeId\");\r\n        _;\r\n    }\r\n\r\n    constructor (address _cUSD) {\r\n        if(_cUSD == address(0)) revert();\r\n        cUSD = _cUSD;\r\n        LOAN_HASH = _toHash(\"LOAN\");\r\n        ADVANCE_HASH = _toHash(\"ADVANCE\");\r\n        ACCEPTED_HASH = _toHash(\"ACCEPTED\");\r\n        REJECTED_HASH = _toHash(\"REJECTED\");\r\n    }\r\n\r\n    receive() external payable { revert(); }\r\n\r\n    function _toHash(string memory loanOrHashStr) internal pure returns(bytes32 _hash) {\r\n        return keccak256(abi.encode(loanOrHashStr));\r\n    }\r\n\r\n    function _sendPayment(address from, address to, uint amount) private {\r\n        if(!IERC20(cUSD).transferFrom(from, to, amount)) revert TransferFromFailed();\r\n    }\r\n\r\n    function _amortize(address employerAddr, uint employeeId, EmployeePayload memory pld) internal returns(uint payBalance) {\r\n        if(pld.loanReq.amount > 0) {\r\n            uint loanBal = pld.loanReq.amount;\r\n            pld.loanReq.amortizationAmt <= loanBal? \r\n                (loanBal -= pld.loanReq.amortizationAmt, payBalance = pld.pay - pld.loanReq.amortizationAmt) : \r\n                    (loanBal -= loanBal, payBalance = pld.pay - loanBal);\r\n            employees[employerAddr][employeeId].loanReq.amount = loanBal;\r\n            if(loanBal > 0) {\r\n                employees[employerAddr][employeeId].loanReq.status = LoanRequestStatus.SERVICED;\r\n            }\r\n        }\r\n\r\n        if(pld.advanceReq.amount > 0) {\r\n            uint loanBal = pld.advanceReq.amount;\r\n            pld.advanceReq.amortizationAmt <= loanBal? \r\n                (loanBal -= pld.advanceReq.amortizationAmt, payBalance = pld.pay - pld.advanceReq.amortizationAmt) : \r\n                    (loanBal -= loanBal, payBalance = pld.pay - loanBal);\r\n            employees[employerAddr][employeeId].advanceReq.amount = loanBal;\r\n            if(loanBal > 0) {\r\n                employees[employerAddr][employeeId].advanceReq.status = AdvanceRequestStatus.SERVICED;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function addEmployee(address[] memory addresses, uint256[] memory payments, uint8 saveForMeRate, uint8 amortizationRate) public returns(bool done) {\r\n        address sender = _msgSender();\r\n        uint addressLength = addresses.length;\r\n        require(addressLength == payments.length, \"Addresses to payment mismatch\");\r\n        for(uint8 i = 0; i < addressLength; i++) {\r\n            address addr = addresses[i];\r\n            if(addr != address(0)) {\r\n                if(!isAdded[sender][addr]) {\r\n                    isAdded[sender][addr] = true;\r\n                    employees[sender].push(EmployeePayload( addr, i, true, false, payments[i], saveForMeRate, amortizationRate, AdvanceRequest(0, 0, AdvanceRequestStatus(0)), LoanRequest(0, 0, 0, LoanRequestStatus(0))));\r\n                }\r\n            }\r\n        }\r\n        return done;\r\n    }\r\n\r\n    function disableOrEnableEmployee(uint employeeId, bool value) \r\n        public \r\n        validateEmployeeId(employeeId, _msgSender()) \r\n        returns(bool) \r\n    {\r\n        address sender = _msgSender();\r\n        EmployeePayload memory emp = employees[sender][employeeId];\r\n        if(value) {\r\n            require(!emp.active, \"Enabled\");\r\n        } else {\r\n            require(emp.active, \"Disabled\");\r\n        }\r\n        employees[sender][employeeId].active = value;\r\n\r\n        return true;\r\n    }\r\n\r\n    function requestAdvanceOrLoan(address employerAddr, uint employeeId, uint amount, string memory loanOrAdvanceStr) \r\n        public \r\n        validateEmployeeId(employeeId, employerAddr) \r\n        returns(bool) \r\n    {\r\n        EmployeePayload memory pld = employees[employerAddr][employeeId];\r\n        string memory errorMessage = \"You have pending request\";\r\n        bool condition;\r\n        if(_toHash(loanOrAdvanceStr) == ADVANCE_HASH) {\r\n            condition = pld.advanceReq.status == AdvanceRequestStatus.NONE || pld.advanceReq.status == AdvanceRequestStatus.SERVICED;\r\n            require(amount <= pld.pay, \"Advance cannot exceed Salary\");\r\n            employees[employerAddr][employeeId].advanceReq = AdvanceRequest(amount, 0, AdvanceRequestStatus.PENDING);\r\n        } else if(_toHash(loanOrAdvanceStr) == LOAN_HASH) {\r\n            condition = pld.loanReq.status == LoanRequestStatus.NONE || pld.loanReq.status == LoanRequestStatus.SERVICED;\r\n            errorMessage = \"You have pending loan request\";\r\n            employees[employerAddr][employeeId].loanReq = LoanRequest(amount, 0, 0, LoanRequestStatus.REQUESTED);\r\n        } else {\r\n            revert(loanOrAdvanceStr);\r\n        }\r\n        require(condition, errorMessage);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approveLoanOrAdvanceRequest(uint employeeId, uint8 interestRate, uint8 amortizationRate, string memory loanOrAdvanceStr) \r\n        public \r\n        validateEmployeeId(employeeId, _msgSender()) \r\n        returns(bool) \r\n    {\r\n        address sender = _msgSender();\r\n        EmployeePayload memory pld = employees[sender][employeeId];\r\n        require(pld.active, \"Disabled\");\r\n        uint allowance = IERC20(cUSD).allowance(sender, address(this));\r\n        uint interest = (allowance * interestRate) / 100;\r\n        uint amortizationAmt = ((allowance + interest) * amortizationRate) / 100;\r\n        require(amortizationAmt <= pld.pay, \"Amortization exceeds pay\");\r\n        if(_toHash(loanOrAdvanceStr) == ADVANCE_HASH) {\r\n            require(pld.advanceReq.status == AdvanceRequestStatus.PENDING, \"Invalid request\");\r\n            employees[sender][employeeId].advanceReq = AdvanceRequest(allowance, amortizationAmt, AdvanceRequestStatus.DISBURSED);\r\n            _sendPayment(sender, pld.identifier, allowance);\r\n        } else if(_toHash(loanOrAdvanceStr) == LOAN_HASH) {\r\n            require(pld.loanReq.status == LoanRequestStatus.REQUESTED, \"Invalid request\");\r\n            employees[sender][employeeId].loanReq = LoanRequest(\r\n                allowance + interest,\r\n                interest,\r\n                amortizationAmt,\r\n                LoanRequestStatus.RESPONDED\r\n            );\r\n        } else {\r\n            revert (loanOrAdvanceStr);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function acceptOrRejectLoanApproval(address employerAddr, uint employeeId, string memory acceptOrRejectStr) \r\n        public \r\n        validateEmployeeId(employeeId, employerAddr)\r\n        returns(bool) \r\n    {\r\n        address sender = _msgSender();\r\n        EmployeePayload memory emp = employees[sender][employeeId];\r\n        uint allowance = IERC20(cUSD).allowance(employerAddr, address(this));\r\n        require(sender == emp.identifier, \"UnAuthorized call\");\r\n        if(allowance > 0) {\r\n            if(_toHash(acceptOrRejectStr) == ACCEPTED_HASH) {\r\n                employees[sender][employeeId].loanReq.status = LoanRequestStatus.ACCEPTED;\r\n                _sendPayment(employerAddr, emp.identifier, allowance);\r\n            } else if(_toHash(acceptOrRejectStr) == REJECTED_HASH) {\r\n                delete employees[sender][employeeId].loanReq;\r\n            } else {\r\n                revert (acceptOrRejectStr);\r\n            }\r\n        } else {\r\n            delete employees[sender][employeeId].loanReq;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function save4Me(address employerAddr, uint employeeId, bool value)\r\n        public\r\n        validateEmployeeId(employeeId, employerAddr) \r\n        returns(bool) \r\n    {\r\n        address sender = _msgSender();\r\n        EmployeePayload memory emp = employees[sender][employeeId];\r\n        require(sender == emp.identifier, \"UnAuthorized call\");\r\n        employees[sender][employeeId].saveForMe = value;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**@dev Employers pay employees\r\n     * Employees addition are not accepted at this point. \r\n     * Prior to this call, employer should use { disableOrEnableEmployee } to filter ones that should not be paid\r\n     * Note: pay() is atomic by context i.e transfer to all employees must pass simultaneously.\r\n     *      Employers should ensure enough allowance is given to cover the pays.\r\n     * \r\n     * Note: Employers can select the range of empployees to pay. This is done using the { start } and { stop } flags.\r\n     *       These flags neither can exceed the number of employees in storage nor can start eceeds stop.\r\n     * @param employeeId : Id assigned to employee at registration point. It corresponds to their position in the EmployeePayload array.\r\n     * @param acceptSaveForMe : Employer should specify if they're willing to save for employees by holding their pay in custody until otherwise canceled by the employee. \r\n     *                          This attracts interests compounded on the principal pay. \r\n     * @param start : The starting point precision to start payment.\r\n     * @param stop : Position or index where payments should stop\r\n     * \r\n     * Note: Employer should give enough allowance correspond to cUSD balance to cover the expected payment range.\r\n     */\r\n    function sendPayment(uint employeeId, bool acceptSaveForMe, uint start, uint stop) \r\n        public \r\n        validateEmployeeId(employeeId, _msgSender())\r\n        returns(bool) \r\n    {\r\n        address sender = _msgSender();\r\n        EmployeePayload[] memory plds = employees[sender];\r\n        require(start < stop && stop <= plds.length, \"Invalid range selected\");\r\n        for(uint i = start > 0? start - 1 : start; i < stop; i++) {\r\n            uint allowance = IERC20(cUSD).allowance(sender, address(this));\r\n            EmployeePayload memory pld = plds[i];\r\n            uint pay = _amortize(sender, i, pld);\r\n            require(allowance >= pay, \"Not enough balance\");\r\n            if(!pld.saveForMe) {\r\n                _sendPayment(sender, pld.identifier, pay);\r\n            }\r\n            if(pld.saveForMe && acceptSaveForMe) {\r\n                employees[sender][employeeId].pay += (pld.pay + ((pld.pay * pld.saveForMeRate) / 100));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getEmployees(address employerAddr) public view returns(EmployeePayload[] memory) {\r\n        return employees[employerAddr];\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "byzantium",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}